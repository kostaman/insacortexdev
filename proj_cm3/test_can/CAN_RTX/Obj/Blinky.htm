<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed Jul 29 17:19:02 2009
<BR><P>
<H3>Maximum Stack Usage =         80 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b42d4c]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b4c694]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c694]">NMI_Handler</a><BR>
 <LI><a href="#[b4c658]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c658]">HardFault_Handler</a><BR>
 <LI><a href="#[b4c61c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c61c]">MemManage_Handler</a><BR>
 <LI><a href="#[b4c5e0]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c5e0]">BusFault_Handler</a><BR>
 <LI><a href="#[b4c5a4]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c5a4]">UsageFault_Handler</a><BR>
 <LI><a href="#[b4c52c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c52c]">DebugMon_Handler</a><BR>
 <LI><a href="#[b4c478]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4c478]">ADC_IRQHandler</a><BR>
 <LI><a href="#[b48c38]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b48c38]">os_idle_demon</a><BR>
 <LI><a href="#[b48bc0]">os_stk_overflow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b48bc0]">os_stk_overflow</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b4c6d0]">Reset_Handler</a>
 <LI><a href="#[b4c694]">NMI_Handler</a>
 <LI><a href="#[b4c658]">HardFault_Handler</a>
 <LI><a href="#[b4c61c]">MemManage_Handler</a>
 <LI><a href="#[b4c5e0]">BusFault_Handler</a>
 <LI><a href="#[b4c5a4]">UsageFault_Handler</a>
 <LI><a href="#[b42e00]">SVC_Handler</a>
 <LI><a href="#[b4c52c]">DebugMon_Handler</a>
 <LI><a href="#[b42dc4]">PendSV_Handler</a>
 <LI><a href="#[b42d4c]">SysTick_Handler</a>
 <LI><a href="#[b4baa0]">WWDG_IRQHandler</a>
 <LI><a href="#[b4bf50]">PVD_IRQHandler</a>
 <LI><a href="#[b4bde8]">TAMPER_IRQHandler</a>
 <LI><a href="#[b4be9c]">RTC_IRQHandler</a>
 <LI><a href="#[b4c07c]">FLASH_IRQHandler</a>
 <LI><a href="#[b4bf14]">RCC_IRQHandler</a>
 <LI><a href="#[b4c220]">EXTI0_IRQHandler</a>
 <LI><a href="#[b4c1a8]">EXTI1_IRQHandler</a>
 <LI><a href="#[b4c16c]">EXTI2_IRQHandler</a>
 <LI><a href="#[b4c130]">EXTI3_IRQHandler</a>
 <LI><a href="#[b4c0f4]">EXTI4_IRQHandler</a>
 <LI><a href="#[b4c3c4]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[b4c388]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[b4c34c]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[b4c310]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[b4c2d4]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[b4c298]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[b4c25c]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[b4c478]">ADC_IRQHandler</a>
 <LI><a href="#[b46eb0]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[b46e74]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[b4c43c]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[b4c400]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[b4c0b8]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[b4bdac]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[b4bcf8]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[b4bd34]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[b4bd70]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[b4bcbc]">TIM2_IRQHandler</a>
 <LI><a href="#[b4bc80]">TIM3_IRQHandler</a>
 <LI><a href="#[b4bc44]">TIM4_IRQHandler</a>
 <LI><a href="#[b4c004]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[b4c040]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[b4bf8c]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[b4bfc8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[b4be60]">SPI1_IRQHandler</a>
 <LI><a href="#[b4be24]">SPI2_IRQHandler</a>
 <LI><a href="#[b4bc08]">USART1_IRQHandler</a>
 <LI><a href="#[b4bbcc]">USART2_IRQHandler</a>
 <LI><a href="#[b4bb90]">USART3_IRQHandler</a>
 <LI><a href="#[b4c1e4]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[b4bed8]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[b4bb54]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[b48044]">main</a>
 <LI><a href="#[b450b0]">rt_alloc_box</a>
 <LI><a href="#[b45074]">rt_free_box</a>
 <LI><a href="#[c0d61c]">__main</a>
 <LI><a href="#[b47cc0]">rt_evt_set</a>
 <LI><a href="#[b47cfc]">rt_dly_wait</a>
 <LI><a href="#[b47c84]">rt_evt_wait</a>
 <LI><a href="#[b47c0c]">rt_tsk_create</a>
 <LI><a href="#[b47bd0]">rt_tsk_delete</a>
 <LI><a href="#[b47c48]">rt_sys_init</a>
 <LI><a href="#[b48c38]">os_idle_demon</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c0d61c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[c0d2d4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c0d1a8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c0cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0d16c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c0cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0d07c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[b42f2c]"></a>rt_incw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b41c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[b42ef0]"></a>rt_decw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[b42eb4]"></a>rt_inc16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[b44e1c]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b47c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[b47d38]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b48044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b42e78]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[b42e3c]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[b42e00]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b42dc4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b42d88]"></a>Sys_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b42d4c]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c6d0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c694]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c658]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c61c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c5e0]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c5a4]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c52c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c478]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c43c]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c400]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c3c4]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c388]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c34c]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c310]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c2d4]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c298]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c25c]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c220]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c1e4]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c1a8]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c16c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c130]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c0f4]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c0b8]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c07c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c040]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4c004]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bfc8]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bf8c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bf50]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bf14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bed8]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4be9c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4be60]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4be24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bde8]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bdac]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bd70]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bd34]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bcf8]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bcbc]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bc80]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bc44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bc08]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bbcc]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bb90]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4bb54]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b4baa0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b49b74]"></a>stm32_EfiSetup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49b38]"></a>stm32_ClockSetup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b498a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[b49afc]"></a>stm32_NvicSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49ac0]"></a>stm32_IwdgSetup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49a84]"></a>stm32_SysTickSetup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49a48]"></a>stm32_RtcSetup</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49a0c]"></a>stm32_TimerSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b499d0]"></a>stm32_GpioSetup</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b498a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[b49994]"></a>stm32_UsartSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b49958]"></a>stm32_ExtiSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b4991c]"></a>stm32_AfRemapSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b498e0]"></a>stm32_TamperSetup</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b498a4]"></a>stm32_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stm32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b499d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_GpioSetup
<LI><a href="#[b49b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ClockSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b48044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b49868]"></a>stm32_GetPCLK1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b47f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_setup
</UL>

<P><STRONG><a name="[b48c38]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b48c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[b48c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[b48bfc]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b41b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[b48bc0]"></a>os_stk_overflow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b48bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[b48bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
</UL>

<P><STRONG><a name="[b48314]"></a>Hex_Str</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b48224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b482d8]"></a>delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b4829c]"></a>adc_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, blinky.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b48044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b48260]"></a>adc_Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b48170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b48224]"></a>val_display</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b47b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[b47d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b47db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraph
<LI><a href="#[b48314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Str
</UL>

<P><STRONG><a name="[b481e8]"></a>can_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_Init &rArr; CAN_wrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b47e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_wrFilter
<LI><a href="#[b47e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_waitReady
<LI><a href="#[b47ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_testmode
<LI><a href="#[b47edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_start
<LI><a href="#[b47f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[b48044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b481ac]"></a>signal_func</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b48134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiv
<LI><a href="#[b48170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b48170]"></a>emmit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b47dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_wrMsg
<LI><a href="#[b481ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
<LI><a href="#[b48260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_Get
</UL>

<P><STRONG><a name="[b48134]"></a>receiv</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b481ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
</UL>

<P><STRONG><a name="[b480f8]"></a>clock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b480bc]"></a>lcd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b48080]"></a>init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b48044]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = main &rArr; can_Init &rArr; CAN_wrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b47d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[b4829c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_Init
<LI><a href="#[b498a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[b475f4]"></a>lcd_write_4bit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b47540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b475b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[b475b8]"></a>lcd_write_cmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b475f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b47810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[b47504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[b47540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b47b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>

<P><STRONG><a name="[b4757c]"></a>lcd_putchar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b475f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b47810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[b474c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraphXY
<LI><a href="#[b47540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b47d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b47db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraph
</UL>

<P><STRONG><a name="[b47540]"></a>lcd_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b475b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[b475f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b4784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[b47b94]"></a>set_cursor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b475b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b474c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraphXY
<LI><a href="#[b47504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[b48224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b47504]"></a>lcd_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b475b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[b47b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>

<P><STRONG><a name="[b47d74]"></a>lcd_print</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b48224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b47db0]"></a>lcd_bargraph</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b48224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b474c8]"></a>lcd_bargraphXY</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b47b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>

<P><STRONG><a name="[b47f18]"></a>CAN_setup</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[b49868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_GetPCLK1
</UL>
<BR>[Called By]<UL><LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b47edc]"></a>CAN_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b47ea0]"></a>CAN_testmode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b47e64]"></a>CAN_waitReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b47dec]"></a>CAN_wrMsg</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b48170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b46eec]"></a>CAN_rdMsg</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_rdMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[b46e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b47e28]"></a>CAN_wrFilter</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_wrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b481e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b46eb0]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b46e74]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_LP_CAN_RX0_IRQHandler &rArr; CAN_rdMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[b46eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_rdMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c0cf50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0d16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c0d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c0cf14]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c0cb90]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c0cb54]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c0cb18]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b45290]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[b47c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[b45254]"></a>dbg_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[b47c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[b451dc]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[b47bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[b47c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[b451a0]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[b450b0]"></a>rt_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[b45e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[b47c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[b453f8]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b44f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[b47c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[b47cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[b41ca8]"></a>rt_chk_robin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_robin.o(i.rt_chk_robin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[b41c6c]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[b453bc]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b44f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[b47bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[b47c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[b47cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[b47cfc]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b453f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[b441b0]"></a>rt_evt_psh</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b44e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b47cc0]"></a>rt_evt_set</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b44e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[b47c84]"></a>rt_evt_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b453f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[b45074]"></a>rt_free_box</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[b41b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[b47bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[b45038]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[b41bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[b41c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[b41ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b453f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[b44fc0]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[b45e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[b41c30]"></a>rt_mbx_psh</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b42f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_incw
<LI><a href="#[b44e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b42c98]"></a>rt_pop_req</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b41bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[b41bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_deq
<LI><a href="#[b41c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[b441b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[b44f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[b42d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[b41bf4]"></a>rt_psq_deq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_list.o(i.rt_psq_deq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b44f84]"></a>rt_put_dly</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[b453f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[b44f48]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b41bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[b41c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[b41c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[b41ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[b441b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[b44f0c]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[b44e94]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[b41bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[b41c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[b441b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[b47bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[b47cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[b44e58]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[b47bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[b41bb8]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b44e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[b44f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b45380]"></a>rt_switch_req</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b451a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
<LI><a href="#[b48bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b42c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b453f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[b47c48]"></a>rt_sys_init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b44e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[b45254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[b45290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[b45e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[b47c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[b42c5c]"></a>rt_systick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b41b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[b41c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[b41ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[b44f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[b45038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[b45380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[b42d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[b41b7c]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b45074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[b48bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[b42c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[b47c0c]"></a>rt_tsk_create</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b450b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[b451dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b45e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[b47c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[b47bd0]"></a>rt_tsk_delete</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b44e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[b44e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[b45074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[b451dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[b453bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b4784c]"></a>delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b47540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b475f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b477d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
<LI><a href="#[b4784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[b47810]"></a>wait_while_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b477d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b4757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b475b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[b477d4]"></a>lcd_read_status</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b47810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>

<P><STRONG><a name="[b45e0c]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b44fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[b450b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[b47c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[b47c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
