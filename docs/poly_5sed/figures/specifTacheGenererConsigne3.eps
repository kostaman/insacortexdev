%!PS-Adobe-2.0 EPSF-2.0
%%Title: figures/specifTacheGenererConsigne3.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5-alpha5
%%CreationDate: Tue Dec 12 22:26:33 2006
%%For: acco@lesia-005 (Pascal Acco,,,)
%%BoundingBox: 0 0 419 441
%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.557 0.557 0.557 srgb} bind def

end
save
newpath 0 441 moveto 0 0 lineto 419 0 lineto 419 441 lineto closepath clip newpath
-158.0 624.4 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 100
% Polyline
0 slj
0 slc
7.500 slw
n 2625 2925 m 2520 2925 2520 9615 105 arcto 4 {pop} repeat
  2520 9720 9030 9720 105 arcto 4 {pop} repeat
  9135 9720 9135 3030 105 arcto 4 {pop} repeat
  9135 2925 2625 2925 105 arcto 4 {pop} repeat
 cp gs col7 1.00 shd ef gr gs col0 s gr 
/Helvetica ff 180.00 scf sf
2790 3150 m
gs 1 -1 sc (Activity GenererConsigne) col0 sh gr
% here ends figure;
% 
% here starts figure with depth 50
% Polyline
0 slj
0 slc
7.500 slw
n 4140 3915 m
 4140 4230 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 276.00 261.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4005 4095 m
 4275 4095 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 267.00 273.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4275 4095 m
 4275 4230 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 285.00 273.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4005 4095 m
 4005 4230 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 267.00 273.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8100 6705 m 8258 6930 l 8415 6705 l
 8100 6705 l  cp gs col0 s gr 
% Polyline
n 8100 7155 m 8258 6930 l 8415 7155 l
 8100 7155 l  cp gs col0 s gr 
% Polyline
n 6945 7965 m 6840 7965 6840 8580 105 arcto 4 {pop} repeat
  6840 8685 8850 8685 105 arcto 4 {pop} repeat
  8955 8685 8955 8070 105 arcto 4 {pop} repeat
  8955 7965 6945 7965 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Times-Roman ff 180.00 scf sf
7380 8235 m
gs 1 -1 sc (Calculer) col0 sh gr
/Times-Roman ff 180.00 scf sf
7380 8490 m
gs 1 -1 sc (Consigne) col0 sh gr
% Polyline
n 6076 7785 m 5895 8055 l 6076 8325 l 6255 8055 l
 6076 7785 l  cp gs col0 s gr 
% Polyline
n 7516 6615 m 7335 6885 l 7516 7155 l 7695 6885 l
 7516 6615 l  cp gs col0 s gr 
% Ellipse
n 3780 3330 82 82 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 246.53 216.53] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
gs  clippath
3720 3597 m 3720 3750 l 3840 3750 l 3840 3597 l 3840 3597 l 3780 3717 l 3720 3597 l cp
eoclip
n 3780 3420 m
 3780 3735 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 252.00 228.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 3720 3597 m 3780 3717 l 3840 3597 l  col0 s
% Polyline
gs  clippath
4812 4065 m 4965 4065 l 4965 3945 l 4812 3945 l 4812 3945 l 4932 4005 l 4812 4065 l cp
eoclip
n 4320 4005 m
 4950 4005 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 288.00 267.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 4812 4065 m 4932 4005 l 4812 3945 l  col0 s
% Polyline
gs  clippath
7107 4065 m 7260 4065 l 7260 3945 l 7107 3945 l 7107 3945 l 7227 4005 l 7107 4065 l cp
eoclip
n 6750 4005 m
 7245 4005 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 450.00 267.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7107 4065 m 7227 4005 l 7107 3945 l  col0 s
% Polyline
gs  clippath
7635 4542 m 7635 4695 l 7755 4695 l 7755 4542 l 7755 4542 l 7695 4662 l 7635 4542 l cp
eoclip
n 7695 4185 m
 7695 4680 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 513.00 279.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7635 4542 m 7695 4662 l 7755 4542 l  col0 s
% Polyline
n 7245 3780 m 8100 3780 l 8100 4185 l 7245 4185 l
 cp gs col0 s gr 
% Polyline
n 6495 4635 m 6390 4635 6390 5115 105 arcto 4 {pop} repeat
  6390 5220 8445 5220 105 arcto 4 {pop} repeat
  8550 5220 8550 4740 105 arcto 4 {pop} repeat
  8550 4635 6495 4635 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
n 5055 3690 m 4950 3690 4950 4170 105 arcto 4 {pop} repeat
  4950 4275 6645 4275 105 arcto 4 {pop} repeat
  6750 4275 6750 3795 105 arcto 4 {pop} repeat
  6750 3690 5055 3690 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
n 3255 3690 m 3150 3690 3150 4260 105 arcto 4 {pop} repeat
  3150 4365 4215 4365 105 arcto 4 {pop} repeat
  4320 4365 4320 3795 105 arcto 4 {pop} repeat
  4320 3690 3255 3690 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
gs  clippath
7500 5442 m 7500 5595 l 7620 5595 l 7620 5442 l 7620 5442 l 7560 5562 l 7500 5442 l cp
eoclip
n 7560 5220 m
 7560 5580 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 504.00 348.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7500 5442 m 7560 5562 l 7620 5442 l  col0 s
% Polyline
n 6930 5580 m 8055 5580 l 8055 6210 l 6930 6210 l
 cp gs col0 s gr 
% Polyline
gs  clippath
7455 6477 m 7455 6630 l 7575 6630 l 7575 6477 l 7575 6477 l 7515 6597 l 7455 6477 l cp
eoclip
n 7515 6210 m
 7515 6615 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 501.00 414.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7455 6477 m 7515 6597 l 7575 6477 l  col0 s
% Polyline
gs  clippath
7455 7422 m 7455 7575 l 7575 7575 l 7575 7422 l 7575 7422 l 7515 7542 l 7455 7422 l cp
eoclip
n 7515 7155 m
 7515 7560 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 501.00 477.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7455 7422 m 7515 7542 l 7575 7422 l  col0 s
% Polyline
15.000 slw
n 7245 7560 m
 8460 7560 l gs col0 s gr 
% Polyline
7.500 slw
gs  clippath
8175 7422 m 8175 7575 l 8295 7575 l 8295 7422 l 8295 7422 l 8235 7542 l 8175 7422 l cp
eoclip
n 8235 7155 m
 8235 7560 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 549.00 477.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 8175 7422 m 8235 7542 l 8295 7422 l  col0 s
% Polyline
gs  clippath
7770 7827 m 7770 7980 l 7890 7980 l 7890 7827 l 7890 7827 l 7830 7947 l 7770 7827 l cp
eoclip
n 7830 7560 m
 7830 7965 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 522.00 504.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7770 7827 m 7830 7947 l 7890 7827 l  col0 s
% Polyline
gs  clippath
7197 6945 m 7350 6945 l 7350 6825 l 7197 6825 l 7197 6825 l 7317 6885 l 7197 6945 l cp
eoclip
n 6075 7785 m 6075 6885 l
 7335 6885 l gs col0 s gr gr

% arrowhead
n 7197 6945 m 7317 6885 l 7197 6825 l  col0 s
% Polyline
gs  clippath
7770 8952 m 7770 9105 l 7890 9105 l 7890 8952 l 7890 8952 l 7830 9072 l 7770 8952 l cp
eoclip
n 7830 8685 m
 7830 9090 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 522.00 579.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7770 8952 m 7830 9072 l 7890 8952 l  col0 s
% Polyline
gs  clippath
3012 4065 m 3165 4065 l 3165 3945 l 3012 3945 l 3012 3945 l 3132 4005 l 3012 4065 l cp
eoclip
n 5895 8055 m 2745 8055 l 2745 4005 l
 3150 4005 l gs col0 s gr gr

% arrowhead
n 3012 4065 m 3132 4005 l 3012 3945 l  col0 s
% Polyline
15.000 slw
n 7245 9090 m
 8145 9090 l gs col0 s gr 
% Polyline
7.500 slw
n 7245 9495 m 8280 9495 l 8280 9900 l 7245 9900 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
7905 9357 m 7905 9510 l 8025 9510 l 8025 9357 l 8025 9357 l 7965 9477 l 7905 9357 l cp
eoclip
n 7965 9090 m
 7965 9495 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 531.00 606.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 7905 9357 m 7965 9477 l 8025 9357 l  col0 s
% Polyline
gs  clippath
6135 8508 m 6135 8355 l 6015 8355 l 6015 8508 l 6015 8508 l 6075 8388 l 6135 8508 l cp
eoclip
n 7425 9090 m 7425 9360 l 6075 9360 l
 6075 8370 l gs col0 s gr gr

% arrowhead
n 6135 8508 m 6075 8388 l 6015 8508 l  col0 s
/Times-Roman ff 180.00 scf sf
3375 4185 m
gs 1 -1 sc (Station) col0 sh gr
/Times-Roman ff 180.00 scf sf
3330 3960 m
gs 1 -1 sc (Attente) col0 sh gr
/Times-Roman ff 180.00 scf sf
5040 3960 m
gs 1 -1 sc (Recherche Position) col0 sh gr
/Times-Roman ff 180.00 scf sf
5040 4215 m
gs 1 -1 sc (A Atteindre) col0 sh gr
/Times-Roman ff 180.00 scf sf
7335 4050 m
gs 1 -1 sc (Position) col0 sh gr
/Times-Roman ff 180.00 scf sf
6615 4905 m
gs 1 -1 sc (Calculer Parametre) col0 sh gr
/Times-Roman ff 180.00 scf sf
7020 5160 m
gs 1 -1 sc (Rampe) col0 sh gr
/Times-Roman ff 180.00 scf sf
5670 3150 m
gs 1 -1 sc (<<Active>>) col0 sh gr
/Times-Roman ff 180.00 scf sf
7020 5850 m
gs 1 -1 sc (Parametre) col0 sh gr
/Times-Roman ff 180.00 scf sf
7020 6105 m
gs 1 -1 sc (Rampe) col0 sh gr
/Times-Roman ff 180.00 scf sf
8145 6660 m
gs 1 -1 sc (10ms) col0 sh gr
/Times-Roman ff 180.00 scf sf
4905 7290 m
gs 1 -1 sc ([PositionAtteinte=False]) col0 sh gr
/Times-Roman ff 180.00 scf sf
5265 7965 m
gs 1 -1 sc ([else]) col0 sh gr
/Times-Roman ff 180.00 scf sf
7380 9765 m
gs 1 -1 sc (Consigne) col0 sh gr
% here ends figure;
$F2psEnd
rs
end
showpage
%%Trailer
%EOF
