C166 COMPILER V6.08, LIB_AUTOM_2008A                                                       06/28/2009 16:21:32 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE LIB_AUTOM_2008A
OBJECT MODULE PLACED IN .\objs\lib_autom_2008a.obj
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE lib_autom_2008a.c TINY BROWSE INCDIR(.\archi_appli;..\..\..\tram
                    -poline-1.1\os;..\..\..\trampoline-1.1\com;..\..\..\trampoline-1.1\os\os_machine\c166;..\..\..\trampoline-1.1\goil\templa
                    -tes\c166;..\..\..\trampoline-1.1\debug) MOD167 DEFINE(WITH_COMPILER_SETTINGS) DEBUG OBJECT(.\objs\lib_autom_2008a.obj) 

 stmt lvl     source

    1         #include "lib_autom_2008a.h"
    2         #include "driveurs_2008a.h"
    3         
    4         float Vieux_I_Pos = 0.0;
    5         
    6         
    7         
    8         Un_Etat Lire_Etat_Absolu(void)
    9         {
   10  1              Un_Etat Courant;
   11  1              Courant.Pos=Lire_Position();
   12  1              Courant.Vit=Lire_Vitesse();
   13  1              Courant.I_Pos = 666;
   14  1      
   15  1         return Courant;
   16  1      }
   17         
   18         Un_Etat Calculer_Etat_Relatif(Un_Etat Etat_Cons)
   19         {
   20  1              Un_Etat Courant;
   21  1              Courant.Pos= Etat_Cons.Pos - Lire_Position();
   22  1              Courant.Vit= Etat_Cons.Vit -  Lire_Vitesse();
   23  1              Vieux_I_Pos = (float)(Courant.Pos) * TE + Vieux_I_Pos ;
   24  1              if (Vieux_I_Pos > I_MAX) Vieux_I_Pos = I_MAX;
   25  1              if (Vieux_I_Pos < I_MIN) Vieux_I_Pos = I_MIN;
   26  1      
   27  1              Courant.I_Pos = (signed int)(Vieux_I_Pos);
   28  1              return Courant;
   29  1      }
   30         
   31         void Reinit_Etat(int Longueur_Trajet)
   32         {
   33  1              Init_Position(Lire_Position()-Longueur_Trajet);
   34  1              Vieux_I_Pos = 0.0;
   35  1      }
   36         
   37         
   38         /*
   39         _______________________________________________________________________________
   40                                 Tâche du       Générateur de trajectoires
   41         _______________________________________________________________________________
   42         Période = Tc*Ttourniquet 
   43         
   44         IN :    SIGNAL -> déclenche la synthèse de la trajactoire
   45                         Position_Voulue : float globale => position désirée [m] à la fin de la trajectoire
   46         
   47         OUT:   Consigne_Vitesse : float globale=> consigne de vitesse (périodique à Tc)
   48                Consigne_Position : float globale=> consigne de position liée (Tc)
   49         
   50         Vitesse
   51           /\         Vmax ----> _______________________________
   52            |                  / I                             I\
   53            |                 /  I                                                         I \
C166 COMPILER V6.08, LIB_AUTOM_2008A                                                       06/28/2009 16:21:32 PAGE 2   

   54            |                /   I                                                         I  \
   55            |                       /    I                                                         I   \
   56            |                      /         I                                                     I        \
   57            |   __________/          I                                                     I     \____________
   58            |_____________I______I_____________________________I___________________\ temps
   59                          |       |_                            |<---->|_           /
   60                          |                 \_                                              |            \_
   61                                          |           \_                                            |              \_
   62                                          |<----------->|                                           |<---------->|
   63                                          |  TM                                                         |      TM 
   64                          |------------------------------------>|
   65                                           Tstop
   66         
   67         Pour que la position finale soit Position_Voulue[m] il faut calculer le 
   68                                                                        Tstop(Vmax,TM,Position_Voulue)
   69                           Position_Voulue
   70                 Tstop = __________________   surprenant mais vrai ! indépendant des rampes de montée...
   71                               Vmax
   72                 Tstop = Npas * Tc (on échantillone la trajectoire à la période Tc
   73         
   74         */
   75         
   76         struct {
   77                 unsigned int Count;
   78                 unsigned char Phase;
   79                 unsigned int Position_Finale;
   80                 unsigned int Tfrein;
   81                 unsigned int Tend ;
   82                 unsigned int Delta_V;
   83                 float  Position;
   84                 unsigned int Vitesse;
   85         } E;
   86         
   87         #define TM ((unsigned int)(TEMPS_MONTEE/TT))
   88         void Init_Trajectoire(unsigned int Position_Station)
   89         {
   90  1                              E.Position_Finale = Position_Station;
   91  1                              E.Count = 0;
   92  1      //                      E.Phase = 'M';
   93  1                              E.Tfrein = (unsigned int)(((long unsigned int)(E.Position_Finale)*1000L)/(long unsigned int)(VMAX*TT));
             - //T2 (en multiples de Tc)
   94  1                              E.Tend = TM+E.Tfrein;
   95  1                              E.Delta_V = (VMAX*TT)/TEMPS_MONTEE;  //incrément de vitesse par période du générateur pour la rampe
   96  1                              E.Vitesse=0;
   97  1                              E.Position=0.0;
   98  1      }
   99         
  100         unsigned int Compteur_Trajectoire (void)
  101         {
  102  1         return E.Count;
  103  1      }
  104         
  105         Un_Etat Lire_Consigne(void)
  106         {       
  107  1              Un_Etat Consigne;
  108  1              Consigne.I_Pos = 999;
  109  1              Consigne.Pos = (unsigned int) E.Position;
  110  1              Consigne.Vit = (unsigned int) ((float)E.Vitesse*KD);
  111  1      
  112  1              return Consigne;
  113  1      }
  114         //const int Position_Voulue = (int)33.0/PAS;
C166 COMPILER V6.08, LIB_AUTOM_2008A                                                       06/28/2009 16:21:32 PAGE 3   

  115         
  116         unsigned char Iterer_Trajectoire(void)
  117         {
  118  1              signed int DV = 0;
  119  1              unsigned int VV;
  120  1      
  121  1                      E.Count++;      
  122  1                      VV=E.Vitesse;
  123  1                              
  124  1                      if (E.Count<TM)
  125  1                      {
  126  2                              E.Vitesse = E.Vitesse+E.Delta_V;
  127  2                      }
  128  1      #ifdef AVEC_APPROCHE
  129  1                      else if (E.Count<E.Tfrein)
  130  1      #else
                              else if (E.Count<=E.Tfrein)
              #endif
  133  1                      {               
  134  2                              E.Vitesse = VMAX;
  135  2                      }
  136  1      #ifdef AVEC_APPROCHE
  137  1                      else if ((E.Position_Finale-(int)E.Position-1)>(VAPP*TT/1000))
  138  1                      {
  139  2                              E.Vitesse = E.Vitesse -  E.Delta_V;
  140  2                              if (E.Vitesse < VAPP)
  141  2                              {
  142  3                                      E.Delta_V=0; 
  143  3                                      E.Vitesse = VAPP;
  144  3                               }
  145  2                      }
  146  1      #else
                              else if (E.Vitesse>E.Delta_V)
                              {
                                      E.Vitesse = E.Vitesse -  E.Delta_V;
                              }
              #endif
  152  1                      else
  153  1                      {
  154  2                                      E.Vitesse = 0;
  155  2      #ifdef AVEC_APPROCHE
  156  2                                      E.Position = E.Position_Finale;
  157  2      #endif
  158  2      
  159  2                      return 1;
  160  2                      }
  161  1      
  162  1                      E.Position = E.Position + (float)((E.Vitesse+VV)*TT)/2000.0;
  163  1      
  164  1                      return 0;
  165  1                      //Envoyer_Msg(NUM_MO_CONTROLEUR,Consigne);
  166  1      
  167  1                      //Consigne.Position=Position_Voulue;
  168  1                      //Envoyer_Msg(NUM_MO_CONTROLEUR,Consigne);
  169  1                      //os_wait(K_IVL,500,0);
  170  1                      //Envoyer_Mode_Rame(MODE_A_L_ARRET);
  171  1                              
  172  1      }
  173         
  174         
  175         

C166 COMPILER V6.08, LIB_AUTOM_2008A                                                       06/28/2009 16:21:32 PAGE 4   


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         544     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          22     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           8     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
