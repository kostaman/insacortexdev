C166 COMPILER V6.08, TPL_OS_ACTION                                                         06/28/2009 16:38:37 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE TPL_OS_ACTION
OBJECT MODULE PLACED IN .\objs\tpl_os_action.obj
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE ..\..\..\trampoline-1.1\os\tpl_os_action.c TINY BROWSE INCDIR(.\
                    -archi_appli;..\..\..\trampoline-1.1\os;..\..\..\trampoline-1.1\com;..\..\..\trampoline-1.1\os\os_machine\c166;..\..\..\t
                    -rampoline-1.1\goil\templates\c166;..\..\..\trampoline-1.1\debug) MOD167 DEFINE(WITH_COMPILER_SETTINGS) DEBUG PRINT(.\tpl
                    -_os_action.lst) OBJECT(.\objs\tpl_os_action.obj) 

 stmt lvl     source

    1         /**
    2          * @file tpl_os_action.h
    3          *
    4          * @section desc File description
    5          *
    6          * Trampoline Action implementation. Actions are used for alarm action. They
    7          * are also used by COM for actions.
    8          *
    9          * @section copyright Copyright
   10          *
   11          * Trampoline OS
   12          *
   13          * Trampoline is copyright (c) IRCCyN 2005-2007
   14          * Trampoline is protected by the French intellectual property law.
   15          *
   16          * This software is distributed under the Lesser GNU Public Licence
   17          *
   18          * @section infos File informations
   19          *
   20          * $Date$
   21          * $Rev$
   22          * $Author$
   23          * $URL$
   24          */
   25         
   26         #include "tpl_os_definitions.h"
   27         #include "tpl_os_kernel.h"
   28         #include "tpl_os_action.h"
   29         
   30         #define OS_START_SEC_CODE
   31         #include "tpl_memmap.h"
   32         
   33         /**
   34          *  action function for action call back
   35          */
   36         FUNC(tpl_status, OS_CODE) tpl_action_callback(
   37             P2CONST(tpl_action, OS_APPL_CONST, AUTOMATIC) action)
   38         {
   39  1          /*
   40  1           * A tpl_action * is cast to a tpl_callback_action *
   41  1           * This violate MISRA rule 45. However, since the
   42  1           * first member of tpl_callback_action is a tpl_action
   43  1           * This cast behaves correctly.
   44  1           */
   45  1          ((P2CONST(tpl_callback_action, OS_APPL_CONST, AUTOMATIC))action)->callback();
   46  1      
   47  1          return E_OK;
   48  1      }
   49         
   50         /**
   51          *  action function for action by task activation
   52          */
C166 COMPILER V6.08, TPL_OS_ACTION                                                         06/28/2009 16:38:37 PAGE 2   

   53         FUNC(tpl_status, OS_CODE) tpl_action_activate_task(
   54             P2CONST(tpl_action, OS_APPL_CONST, AUTOMATIC) action
   55         )
   56         {
   57  1          /*
   58  1           * A tpl_action * is cast to a tpl_task_activation_action *
   59  1           * This violate MISRA rule 45. However, since the
   60  1           * first member of tpl_task_activation_action is a tpl_action
   61  1           * This cast behaves correctly.
   62  1           */
   63  1          return tpl_activate_task(
   64  1              ((P2CONST(tpl_task_activation_action, OS_APPL_CONST, AUTOMATIC))action)->task
   65  1          );
   66  1      }
   67         
   68         /**
   69          *  action function for action by setting event
   70          */
   71         FUNC(tpl_status, OS_CODE) tpl_action_setevent(
   72             P2CONST(tpl_action, OS_APPL_CONST, AUTOMATIC) action)
   73         {
   74  1          /*
   75  1           * A tpl_action * is cast to a tpl_setevent_action *
   76  1           * This violate MISRA rule 45. However, since the
   77  1           * first member of tpl_setevent_action is a tpl_action
   78  1           * This cast behaves correctly.
   79  1           */
   80  1          return tpl_set_event(
   81  1              ((P2CONST(tpl_setevent_action, OS_APPL_CONST, AUTOMATIC))action)->task,
   82  1              ((P2CONST(tpl_setevent_action, OS_APPL_CONST, AUTOMATIC))action)->mask
   83  1          );
   84  1      }
   85         
   86         #define OS_STOP_SEC_CODE
   87         #include "tpl_memmap.h"
   88         
   89         /* End of file tpl_os_action.c */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =          36     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
