<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 942]: Last Updated: Mon Jul 06 09:52:51 2009
<BR><P>
<H3>Maximum Stack Usage =         80 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b13168]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b133a8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b133a8]">NMI_Handler</a><BR>
 <LI><a href="#[b13360]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b13360]">HardFault_Handler</a><BR>
 <LI><a href="#[b13318]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b13318]">MemManage_Handler</a><BR>
 <LI><a href="#[b132d0]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b132d0]">BusFault_Handler</a><BR>
 <LI><a href="#[b13288]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b13288]">UsageFault_Handler</a><BR>
 <LI><a href="#[b131f8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b131f8]">DebugMon_Handler</a><BR>
 <LI><a href="#[b13120]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b13120]">ADC_IRQHandler</a><BR>
 <LI><a href="#[b0c810]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0c810]">os_idle_demon</a><BR>
 <LI><a href="#[b07ac0]">delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b07ac0]">delay</a><BR>
 <LI><a href="#[b0c780]">os_stk_overflow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0c780]">os_stk_overflow</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b133f0]">Reset_Handler</a>
 <LI><a href="#[b133a8]">NMI_Handler</a>
 <LI><a href="#[b13360]">HardFault_Handler</a>
 <LI><a href="#[b13318]">MemManage_Handler</a>
 <LI><a href="#[b132d0]">BusFault_Handler</a>
 <LI><a href="#[b13288]">UsageFault_Handler</a>
 <LI><a href="#[b13240]">SVC_Handler</a>
 <LI><a href="#[b131f8]">DebugMon_Handler</a>
 <LI><a href="#[b131b0]">PendSV_Handler</a>
 <LI><a href="#[b13168]">SysTick_Handler</a>
 <LI><a href="#[b12550]">WWDG_IRQHandler</a>
 <LI><a href="#[b12af0]">PVD_IRQHandler</a>
 <LI><a href="#[b12940]">TAMPER_IRQHandler</a>
 <LI><a href="#[b12a18]">RTC_IRQHandler</a>
 <LI><a href="#[b12c58]">FLASH_IRQHandler</a>
 <LI><a href="#[b12aa8]">RCC_IRQHandler</a>
 <LI><a href="#[b12e50]">EXTI0_IRQHandler</a>
 <LI><a href="#[b12dc0]">EXTI1_IRQHandler</a>
 <LI><a href="#[b12d78]">EXTI2_IRQHandler</a>
 <LI><a href="#[b12d30]">EXTI3_IRQHandler</a>
 <LI><a href="#[b12ce8]">EXTI4_IRQHandler</a>
 <LI><a href="#[b13048]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[b13000]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[b12fb8]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[b12f70]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[b12f28]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[b12ee0]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[b12e98]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[b13120]">ADC_IRQHandler</a>
 <LI><a href="#[b125e0]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[b12598]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[b130d8]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[b13090]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[b12ca0]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[b128f8]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[b12820]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[b12868]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[b128b0]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[b127d8]">TIM2_IRQHandler</a>
 <LI><a href="#[b12790]">TIM3_IRQHandler</a>
 <LI><a href="#[b12748]">TIM4_IRQHandler</a>
 <LI><a href="#[b12bc8]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[b12c10]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[b12b38]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[b12b80]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[b129d0]">SPI1_IRQHandler</a>
 <LI><a href="#[b12988]">SPI2_IRQHandler</a>
 <LI><a href="#[b12700]">USART1_IRQHandler</a>
 <LI><a href="#[b126b8]">USART2_IRQHandler</a>
 <LI><a href="#[b12670]">USART3_IRQHandler</a>
 <LI><a href="#[b12e08]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[b12a60]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[b12628]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[b09590]">main</a>
 <LI><a href="#[f2e638]">rt_alloc_box</a>
 <LI><a href="#[f2e5f0]">rt_free_box</a>
 <LI><a href="#[f290b0]">__main</a>
 <LI><a href="#[f38ba0]">rt_evt_set</a>
 <LI><a href="#[f376a0]">rt_dly_wait</a>
 <LI><a href="#[f38b58]">rt_evt_wait</a>
 <LI><a href="#[f3b848]">rt_tsk_create</a>
 <LI><a href="#[f3b800]">rt_tsk_delete</a>
 <LI><a href="#[f3b890]">rt_sys_init</a>
 <LI><a href="#[b0c810]">os_idle_demon</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[f290b0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[f28bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[f28c00]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f28bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[f28bb8]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f28c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[f290b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f28b70]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f28648]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f28600]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f285b8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f36228]"></a>rt_incw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2c7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[f361e0]"></a>rt_decw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[f36198]"></a>rt_inc16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[f36150]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f3b890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[f36108]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f360c0]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[f36078]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[b13240]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b131b0]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f36030]"></a>Sys_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b13168]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b133f0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))

<P><STRONG><a name="[b133a8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b133a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b133a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13360]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b13360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b13360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13318]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b13318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b13318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b132d0]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b132d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b132d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13288]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b13288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b13288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b131f8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b131f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b131f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13120]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b13120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b13120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b130d8]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13090]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13048]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b13000]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12fb8]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12f70]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12f28]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12ee0]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12e98]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12e50]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12e08]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12dc0]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12d78]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12d30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12ce8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12ca0]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12c58]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12c10]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12bc8]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12b80]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12b38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12af0]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12aa8]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12a60]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12a18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b129d0]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12988]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12940]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b128f8]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b128b0]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12868]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12820]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b127d8]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12790]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12748]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12700]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b126b8]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12670]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12628]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12550]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b0e760]"></a>stm32_EfiSetup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e718]"></a>stm32_ClockSetup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0e400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[b0e6d0]"></a>stm32_NvicSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e688]"></a>stm32_IwdgSetup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e640]"></a>stm32_SysTickSetup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e5f8]"></a>stm32_RtcSetup</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e5b0]"></a>stm32_TimerSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e568]"></a>stm32_GpioSetup</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0e400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[b0e520]"></a>stm32_UsartSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e4d8]"></a>stm32_ExtiSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e490]"></a>stm32_AfRemapSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e448]"></a>stm32_TamperSetup</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32_init.o(.text), UNUSED)

<P><STRONG><a name="[b0e400]"></a>stm32_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stm32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0e568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_GpioSetup
<LI><a href="#[b0e718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_ClockSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0e3b8]"></a>stm32_GetPCLK1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b09428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_setup
</UL>

<P><STRONG><a name="[b0c810]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[b0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[b0c7c8]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f29b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[b0c780]"></a>os_stk_overflow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0c780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[b0c780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
<LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[b098f0]"></a>Hex_Str</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b098a8]"></a>delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b09860]"></a>adc_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, blinky.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b09818]"></a>adc_Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b096f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b097d0]"></a>val_display</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b08f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[b091a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b09278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraph
<LI><a href="#[b098f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[b09620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
</UL>

<P><STRONG><a name="[b09788]"></a>can_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_Init &rArr; CAN_wrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b09308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_wrFilter
<LI><a href="#[b09350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_waitReady
<LI><a href="#[b09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_testmode
<LI><a href="#[b093e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_start
<LI><a href="#[b09428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b09740]"></a>signal_func</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b096b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiv
<LI><a href="#[b096f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b096f8]"></a>emmit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b092c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_wrMsg
<LI><a href="#[b09740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
<LI><a href="#[b09818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_Get
</UL>

<P><STRONG><a name="[b096b0]"></a>receiv</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b09740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
</UL>

<P><STRONG><a name="[b09668]"></a>clock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b09620]"></a>lcd</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b08f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[b091a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[b097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b095d8]"></a>init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, blinky.o(.text), UNUSED)

<P><STRONG><a name="[b09590]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; lcd_init &rArr; lcd_putchar &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[b09860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_Init
<LI><a href="#[b0e400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
<LI><a href="#[f36108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[b068c0]"></a>lcd_write_4bit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_4bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b07ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b06878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b06878]"></a>lcd_write_cmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b07a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[b08f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[b06830]"></a>lcd_putchar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_putchar &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b07a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[b067e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraphXY
<LI><a href="#[b091a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b09278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraph
</UL>

<P><STRONG><a name="[b091e8]"></a>lcd_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_init &rArr; lcd_putchar &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b06878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[b068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b07ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b09620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
</UL>

<P><STRONG><a name="[b08f60]"></a>set_cursor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b06878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b067e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bargraphXY
<LI><a href="#[b09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[b09620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[b097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b09230]"></a>lcd_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_clear &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b06878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[b08f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[b09590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b09620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
</UL>

<P><STRONG><a name="[b091a0]"></a>lcd_print</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b09620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[b097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b09278]"></a>lcd_bargraph</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_display
</UL>

<P><STRONG><a name="[b067e8]"></a>lcd_bargraphXY</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b08f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>

<P><STRONG><a name="[b09428]"></a>CAN_setup</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[b0e3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_GetPCLK1
</UL>
<BR>[Called By]<UL><LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b093e0]"></a>CAN_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b09398]"></a>CAN_testmode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b09350]"></a>CAN_waitReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b092c0]"></a>CAN_wrMsg</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b096f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emmit
</UL>

<P><STRONG><a name="[b03e28]"></a>CAN_rdMsg</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_rdMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[b12598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b09308]"></a>CAN_wrFilter</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_wrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b09788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[b125e0]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b12598]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_LP_CAN_RX0_IRQHandler &rArr; CAN_rdMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[b03e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_rdMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f2dfb8]"></a>SVC_Table</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, SVC_Table.o(SVC_TABLE), UNUSED)

<P><STRONG><a name="[f2e680]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[f3b890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[f35a00]"></a>dbg_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[f3b890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[f359b8]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[f3b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[f3b848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[f35970]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[f2e638]"></a>rt_alloc_box</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[f3b848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[f3bf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[f3b968]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f31370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f376a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[f38b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>

<P><STRONG><a name="[f2f860]"></a>rt_chk_robin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_robin.o(i.rt_chk_robin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[f314d8]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[f3b920]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f312e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f38ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[f3b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[f3b848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[f376a0]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f3b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[f38be8]"></a>rt_evt_psh</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f31250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[f38ba0]"></a>rt_evt_set</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f31250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[f38b58]"></a>rt_evt_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f3b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[f2e5f0]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[f29b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[f3b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[f31490]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[f2ae70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[f2c7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f2f860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[f3b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[f35928]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[f3bf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[f2c7b8]"></a>rt_mbx_psh</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f31250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[f36228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_incw
</UL>
<BR>[Called By]<UL><LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[f33cc8]"></a>rt_pop_req</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2ae70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[f2c7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f312e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[f31400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_deq
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[f38be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f36030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[f31400]"></a>rt_psq_deq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_list.o(i.rt_psq_deq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[f31370]"></a>rt_put_dly</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[f3b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[f31328]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f2ae70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[f2c7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f2f860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[f314d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[f38be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[f312e0]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[f31250]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[f2ae70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[f2c7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f38ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[f38be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[f3b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[f31208]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[f3b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[f2ae70]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f31250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[f31328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[f3b8d8]"></a>rt_switch_req</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[b0c780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_overflow
<LI><a href="#[f35970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[f33cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[f3b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[f3b890]"></a>rt_sys_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f2e680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[f35a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[f36150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[f3b848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[f3bf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[f33c38]"></a>rt_systick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f29b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[f2f860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[f312e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[f31490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[f314d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[f3b8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f36030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[f29b90]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[f2e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[f33c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[f3b848]"></a>rt_tsk_create</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f2e638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[f359b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[f3bf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[f3b890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL>
<P><STRONG><a name="[f3b800]"></a>rt_tsk_delete</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_switch_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f2e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[f31208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[f31250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[f359b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[f3b920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b07ac0]"></a>delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_4bit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b07ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[b07a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
<LI><a href="#[b07ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b091e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b07a78]"></a>wait_while_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b07a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b06830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[b06878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[b07a30]"></a>lcd_read_status</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b07ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b07a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>

<P><STRONG><a name="[f3bf50]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[f2e638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[f35928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[f3b848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[f3b890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
