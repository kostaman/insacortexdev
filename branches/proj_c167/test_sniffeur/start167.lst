A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     1


MACRO ASSEMBLER A166 V5.30
OBJECT MODULE PLACED IN .\start167.obj
ASSEMBLER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\A166.EXE ..\..\includes\start167.a66 SEGMENTED MOD167 SET(SMALL) DEBUG P
                      RINT(.\start167.lst) OBJECT(.\start167.obj) EP

LOC      OBJ             LINE     SOURCE

                            1     $MOD167                                 ; Define C167 mode
                            2     ;
                            3     ;------------------------------------------------------------------------------
                            4     ;  This file is part of the C166 Compiler package
                            5     ;  Copyright KEIL ELEKTRONIK GmbH 1993 - 2000
                            6     ;  Version 4.10
                            7     ;------------------------------------------------------------------------------
                            8     ;  START167.A66:  This code is executed after processor reset and provides the
                            9     ;                 startup sequence for the extended 166 architecture CPU's.
                           10     ;                 (i.e. C167/C165/C164/C163/C161, ST10-262 ect.)
                           11     ;
                           12     ;  To translate this file use A166 with the following invocation:
                           13     ;
                           14     ;     A166 START167.A66 SET (<model>)
                           15     ;
                           16     ;     <model> determines the memory model and can be one of the following:
                           17     ;         TINY, SMALL, COMPACT, HCOMPACT, MEDIUM, LARGE or HLARGE
                           18     ;
                           19     ;  Example:  A166 START167.A66 SET (SMALL)
                           20     ;
                           21     ;  To link the modified START167.OBJ file to your application use the following
                           22     ;  L166 invocation:
                           23     ;
                           24     ;     L166 <your object file list>, START167.OBJ <controls>
                           25     ;
                           26     ;------------------------------------------------------------------------------
                           27     ; Setup model-dependend Assembler controls
                           28     $CASE
                           29     $IF NOT TINY
                           30     $SEGMENTED
                           31     $ENDIF
                           32     ;------------------------------------------------------------------------------
                           33     ;
                           34     ; Definitions for BUSCON0 and SYSCON Register:
                           35     ; --------------------------------------------
                           36     ;
                           37     ; MCTC0: Memory Cycle Time (BUSCON0.0 .. BUSCON0.3):
                           38     ; Note: if RDYEN0 == 1 a maximum number of 7 waitstates can be selected
 0001                      39     _MCTC0 EQU 1 ; Uv2/Dave
                           40     ;_MCTC0  EQU    1       ; Memory wait states is 1 (MCTC0 field = 0EH).
                           41     ;                       ; (Reset Value = 15 additional state times)
                           42     ;
                           43     ; RWDC0: Read/Write Signal Delay (BUSCON0.4):
 0000                      44     _RWDC0 EQU 0 ; Uv2/Dave
                           45     ;                       ; 1 = No Delay Time  0   States
                           46     ;
                           47     ; MTTC0: Memory Tri-state Time (BUSCON0.5):
 0000                      48     _MTTC0 EQU 0 ; Uv2/Dave
                           49     ;                       ; 1 = No Delay Time  0   States
                           50     ;
                           51     $SET (BTYP_ENABLE = 0)  ; 0 = BTYP0 and BUSACT0 is set according to the level
                           52                             ;     at pins P0L.6, P0L.7, and EA# during reset.
                           53                             ; 1 = the following _BTYP0 and _BUSACT0 values are
                           54                             ;     written to BTYP0 and BUSACT0
                           55     ;
                           56     ; BTYP0: External Bus Configuration Control (BUSCON0.6 .. BUSCON0.7):
 0002                      57     _BTYP0 EQU 2 ; Uv2/Dave
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     2

                           58     ;                       ; 1 = 8 Bit Multiplexed
                           59     ;                       ; 2 = 16 Bit Non Multiplexed
                           60     ;                       ; 3 = 16 Bit Multiplexed
                           61     ;
                           62     ; ALECTL0: ALE Lengthening Control Bit (BUSCON0.9):
 0000                      63     _ALECTL0 EQU 0 ; Uv2/Dave
                           64     ;
                           65     ; BUSACT0: Bus Active Control Bit (BUSCON0.10):
 0001                      66     _BUSACT0 EQU 1 ; Uv2/Dave
                           67                             ; = 1 external bus enabled
                           68     ;
                           69     ; RDYEN0: READY# Input Enable control bit (BUSCON0.12):
 0000                      70     _RDYEN0 EQU 0 ; Uv2/Dave
                           71     ;                       ; 1 = READY# function enabled
                           72     ;
                           73     ; RDY_AS0: Synchronous / Asynchronous READY# Input (BUSCON0.3):
                           74     ; Note: This bit is only valid if _RDYEN0 == 1.
 0000                      75     _RDY_AS0 EQU    0       ; 0 = synchronous READY# input
                           76     ;                       ; 1 = asynchronous READY# input
                           77     ;
                           78     ; CSREN0: Read Chip Select Enable bit (BUSCON0.14, only in some devices):
 0000                      79     _CSREN0 EQU 0 ; Uv2/Dave
                           80     ;                       ; 1 = CS0# is generated for the duration of read
                           81     ;
                           82     ; CSWEN0: Write Chip Select Enable bit (BUSCON0.15, only in some devices):
 0000                      83     _CSWEN0 EQU 0 ; Uv2/Dave
                           84     ;                       ; 1 = CS0# is generated for the duration of write
                           85     ;
                           86     ; XPERSHARE: XBUS Peripheral Share Mode Control (SYSCON.0)
 0000                      87     _XPERSHARE EQU 0 ; Uv2/Dave
                           88     ;                       ; 1 = XBUS accessible via external BUS in hold mode
                           89     ;
                           90     ; VISIBLE: Visible Mode Control (SYSCON.1)
 0000                      91     _VISIBLE EQU 0 ; Uv2/Dave
                           92     ;                       ; 1 = XBUS accesses are made visible on external pins
                           93     ;
                           94     ; XPEN: XRAM & XBUS Peripheral Enable Control Bit (SYSCON.2)
 0001                      95     _XPEN EQU 1 ; Uv2/Dave
                           96     ;                       ; 1 = on-chip XRAM & XBUS is accessed
                           97     ;
                           98     ; BDRSTEN: Bidirectional Reset Enable Bit (SYSCON.3, only in some devices)
 0000                      99     _BDRSTEN EQU    0       ; 0 = Pin RSTIN# is an input only
                          100     ;                       ; 1 = RSTIN# is pulled low during internal reset
                          101     ;
                          102     $SET (OWDDIS_ENABLE = 0); 0 = OWDDIS is set according to the inverted level
                          103     ;                       ;     at pin RD\ duirng reset.
                          104     ;                       ; 1 = the following _OWDDIS value is
                          105     ;                       ;     written to OWDDIS in the SYSCON register
                          106     ; OWDDIS: Oscillator Watchdog Disable Bit (SYSCON.4, only in some devices)
 0000                     107     _OWDDIS EQU     0       ; 0 = the on-chip oscillator watchdog is enabled 
                          108     ;                       ; 1 = the on-chip oscillator watchdog is disabled
                          109     ;
                          110     ; PWDCFG: Power Down Mode Configuration Bit (SYSCON.5, only in some devices)
 0000                     111     _PWDCFG EQU     0       ; 0 = Power Down mode can be left via reset
                          112     ;                       ; 1 = Power Down mode left via ext. or RTC interrupt
                          113     ;
                          114     ; CSCFG: Chip Select Configuration Control (SYSCON.6, only in some devices)
 0000                     115     _CSCFG  EQU     0       ; 0 = Latched CS mode; CS signals are latch internally
                          116     ;                       ; 1 = Unlatched CS mode
                          117     ; 
                          118     $SET (WRCFG_ENABLE = 0) ; 0 = WRCFG is set according to the level at
                          119     ;                       ;     pin P0H.0 during reset.
                          120     ;                       ; 1 = the following _WRCFG value is
                          121     ;                       ;     written to WRCFG in the SYSCON register
                          122     ; WRCFG: Write Configuration Control Bit (SYSCON.7):
 0001                     123     _WRCFG EQU 1 ; Uv2/Dave
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     3

                          124     ;                       ; 1 = WR# pin acts as WRL#, BHE# pin acts as WRH#
                          125     ;
                          126     ; CLKEN: System Clock Output Enable bit (SYSCON.8):
 0000                     127     _CLKEN EQU 0 ; Uv2/Dave
                          128     ;                       ; 1 = enabled
                          129     ;
                          130     ; BYTDIS: Byte High Enable pin control bit (SYSCON.9):
 0000                     131     _BYTDIS EQU 0 ; Uv2/Dave
                          132     ;                       ; 1 = disabled
                          133     ;
                          134     $SET (ROMEN_ENABLE = 0) ; 0 = ROMEN is set according to the level at
                          135     ;                       ;     pin EA# during reset.
                          136     ;                       ; 1 = the following _ROMEN value is
                          137     ;                       ;     written to ROMEN in the SYSCON register
                          138     ; ROMEN: Internal ROM Access Enable control bit (SYSCON.10):
 0000                     139     _ROMEN EQU 0 ; Uv2/Dave
                          140                             ; 1 = Internal ROM enabled
                          141     ;
                          142     ; SGTDIS: Segmentation Disable control bit (SYSCON.11):
                                  $IF TINY
                                  _SGTDIS EQU     1       ; disable segmented mode for TINY model
                          145     $ELSE
 0000                     146     _SGTDIS EQU     0       ; enable segmented mode (Reset Value)
                          147     $ENDIF
                          148     ;
                          149     ; ROMS1: ROM Segment Mapping Control Bit (SYSCON.12):
 0001                     150     _ROMS1 EQU 1 ; Uv2/Dave
                          151     ;                       ; _ROMS1 = 1 Internal ROM mapped to segment 1
                          152     ;
                          153     ; STKSZ: Maximum System Stack Size selection  (SYSCON.13 .. SYSCON.15)
                          154     ;  Defines the system stack space which is used by CALL/RET and PUSH/POP
                          155     ;  instructions.  The system stack space must be adjusted according the
                          156     ;  actual requirements of the application.
                          157     $SET (STK_SIZE = 0) ; Uv2/Dave
                          158     ;     System stack sizes:
                          159     ;       0 = 256 words (Reset Value)
                          160     ;       1 = 128 words
                          161     ;       2 =  64 words
                          162     ;       3 =  32 words
                          163     ;       4 = 512 words
                          164     ;       5 = not implemented
                          165     ;       6 = not implemented
                          166     ;       7 = no wrapping (entire internal RAM use as STACK, set size with SYSSZ)
                          167     ; If you have selected 7 for STK_SIZE, you can set the actual system stack size
                          168     ; with the following SSTSZ statement.
 0200                     169     SSTSZ   EQU     200H    ; set System Stack Size to 200H Bytes
                          170     ;
                          171     ; USTSZ: User Stack Size Definition 
                          172     ;  Defines the user stack space available for automatics.  This stack space is
                          173     ;  accessed by R0.  The user stack space must be adjusted according the actual
                          174     ;  requirements of the application.
 1000                     175     USTSZ   EQU     1000H   ; set User Stack Size to 1000H Bytes.
                          176     ;
                          177     ; WATCHDOG: Disable Hardware Watchdog
                          178     ; --- Set WATCHDOG = 1 to enable the Hardware watchdog
                          179     $SET (WATCHDOG = 0)
                          180     ;
                          181     ;
                          182     ; CLR_MEMORY: Disable Memory Zero Initialization of RAM area
                          183     ; --- Set CLR_MEMORY = 0 to disable memory zero initilization
                          184     $SET (CLR_MEMORY = 1)
                          185     ;
                          186     ; INIT_VARS: Disable Variable Initialization
                          187     ; --- Set INIT_VARS = 0 to disable variable initilization
                          188     $SET (INIT_VARS = 1)
                          189     ;
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     4

                          190     ; DPPUSE:  Re-assign DPP registers
                          191     ; --- Set DPPUSE = 0 to reduce the code size of the startup code, if you
                          192     ;                    are not using the L166 DPPUSE directive.
                          193     $SET (DPPUSE = 1)
                          194     ;
                          195     ; DPP3USE: Use DPP3 register during variable initilization
                          196     ; --- Set DPP3USE = 0 to disable the usage of DPP3 during initilization of
                          197     ;                     variables.  This option might be required if you write
                          198     ;                     program parts that are reloaded during application 
                          199     ;                     execution and increase code size of the startup code.
                          200     $SET (DPP3USE = 1)
                          201     ;
                          202     ;------------------------------------------------------------------------------
                          203     ; Initialization for XPERCON register (available on some derivatives only)
                          204     ;
                          205     ; INIT_XPERCON: Init XPERCON register available on some devices
                          206     ; --- Set INIT_XPERCON = 1 to initilize the XPERCON register
                          207     $SET (INIT_XPERCON = 1) ; Uv2/Dave
                          208     ;
                          209     ; Note: The verious devices of 166/ST10 family provide different XPERCON
                          210     ;       registers.  Therefore you can set a fixed XPERCON value with the
                          211     ;       following EQU statment.  Please consult the Microcontroller 
                          212     ;       User's Guide for the exact definition of the XPERCON SFR in your
                          213     ;       166/ST10 derivative.
                          214     ;
                          215     ;            Bit  15   11    7    3
                          216     ;V_XPERCON EQU 3073 ; Uv2/Dave
 0C01                     217     V_XPERCON EQU 3073 ; Uv2/Dave
                          218     ;
                          219     ; XPERCON Bits in various devices (Note: not all devices are listed)
                          220     ;   C165UTAH:  Bit 5: IOM-2, Bit 6: USB,  Bit 7:  EPEC
                          221     ;   C167CS:    Bit 0: CAN1,  Bit 1: CAN2, Bit 10: XRAM 2K  Bit 11: XRAM 6K
                          222     ;
                          223     ;------------------------------------------------------------------------------
                          224     ;
                          225     ; Initialization for SYSCON2 and SYSCON3 (available on some derivatives only)
                          226     ; Note: The SYSCON2 and SYSCON3 bits may be different in some derivatives.
                          227     ;       Check the values carefully!
                          228     ;
                          229     ; ADVANCED_SYSCON: Init SYSCON2 and SYSCON3 register available on some devices
                          230     ; --- Set ADVANCE_SYSCON = 1 to initilize SYSCON2 and SYSCON3
                          231     $SET (ADVANCED_SYSCON = 1)
                          232     ;
                          233     ; --- SYSCON2 values
                          234     ;
                          235     ; PDCON: Power Down Control (during power down mode) (SYSCON2.4 .. SYSCON2.5)
 0000                     236     PDCON   EQU     0       ; 0 = RTC On,  Ports On  (default after Reset)
                          237     ;                       ; 1 = RTC On,  Ports Off
                          238     ;                       ; 2 = RTC Off, Ports On
                          239     ;                       ; 3 = RTC Off, Ports Off
                          240     ;
                          241     ; RTS: RTC Clock Source (not affected by a reset) (SYSCON2.6)
 0000                     242     RTS     EQU     0       ; 0 = Main oscillator
                          243     ;                       ; 1 = Auxiliary oscillator (if available)
                          244     ;
                          245     ; SCS: SDD Clock Source (not affected by a reset) (SYSCON2.7)
 0000                     246     SCS     EQU     0       ; 0 = Main oscillator
                          247     ;                       ; 1 = Auxiliary oscillator (if available)
                          248     ;
                          249     ; CLKCON: Clock State Control (SYSCON2.8 .. SYSCON2.9)
 0000                     250     CLKCON  EQU     0       ; 0 = Running on configured basic frequency
                          251     ;                       ; 1 = Running on slow down frequency, PLL ON
                          252     ;                       ; 2 = Running on slow down frequency, PLL OFF
                          253     ;                       ; 3 = reserved
                          254     ;
                          255     ; CLKREL: Reload Counter Value for Slowdown Devider (SYSCON2.10 .. SYSCON2.14)
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     5

 0000                     256     CLKREL  EQU     0       ; possible values are 0 .. 31
                          257     ;
                          258     ;
                          259     ; --- SYSCON3 values: disable on-chip peripherals
                          260     ;
 0000                     261     ADCDIS  EQU     0       ; 1 = disable Analog/Digital Converter    (SYSCON3.0)
 0000                     262     ASC0DIS EQU     0       ; 1 = disable UART ASC0                   (SYSCON3.1)
 0000                     263     SSCDIS  EQU     0       ; 1 = disable Synchronus Serial Cnl SSC   (SYSCON3.2)
 0000                     264     GPTDIS  EQU     0       ; 1 = disable Timer Block GPT             (SYSCON3.3)
                          265                             ; reserved                                (SYSCON3.4)
 0000                     266     FMDIS   EQU     0       ; 1 = disable on-chip Flash Memory Module (SYSCON3.5)
 0000                     267     CC1DIS  EQU     0       ; 1 = disable CAPCOM Unit 1               (SYSCON3.6)
 0000                     268     CC2DIS  EQU     0       ; 1 = disable CAPCOM Unit 2               (SYSCON3.7)
 0000                     269     CC6DIS  EQU     0       ; 1 = disable CAPCOM Unit 6               (SYSCON3.8)
 0000                     270     PWMDIS  EQU     0       ; 1 = disable Pulse Width Modulation Unit (SYSCON3.9)
 0000                     271     ASC1DIS EQU     0       ; 1 = disable UART ASC1                   (SYSCON3.10)
 0000                     272     I2CDIS  EQU     0       ; 1 = disable I2C Bus Module              (SYSCON3.11)
                          273     ;                       ; reserved                                (SYSCON3.12)
 0000                     274     CAN1DIS EQU     0       ; 1 = disable on-chip CAN Module 1        (SYSCON3.13)
 0000                     275     CAN2DIS EQU     0       ; 1 = disable on-chip CAN Module 2        (SYSCON3.14)
 0000                     276     PCDDIS  EQU     0       ; 1 = disable Peripheral Clock Driver     (SYSCON3.15)
                          277     ;
                          278     ;------------------------------------------------------------------------------
                          279     ; Initialization for RSTCON register (available on some derivatives only)
                          280     ;
                          281     ; INIT_RSTCON: Init RSTCON register available on some devices
                          282     ; --- Set INIT_RSTCON = 1 to initilize the RSTCON register
                          283     $SET (INIT_RSTCON = 0)
                          284     ;
                          285     ; --- RSTCON values
                          286     ;
                          287     ; R_RSTLEN: Reset Length Control (duration of next reset; RSTCON.0 .. RSTCON.1)
 0000                     288     R_RSTLEN   EQU     0       ; 0 = 1024 TCL:  standard duration
                          289     ;                          ; 1 = 2048 TCL:  extended duration
                          290     ;
                          291     ; R_SUE: Software Update enable (RSTCON.8)
 0000                     292     R_SUE      EQU     0       ; 0 = Configuration cannot be changed (default)
                          293     ;                          ; 1 = Software update of configuration is enabled
                          294     ;
                          295     ; R_CSSEL: Chip Select Lines (number of CS pins; RSTCON.9 .. RSTCON.10)
 0000                     296     R_CSSEL    EQU     0       ; 0 = 3 CS lines (CS2# .. CS0#) (default)
                          297     ;                          ; 1 = 2 CS lines (CS1# .. CS0#)
                          298     ;                          ; 2 = No CS lines at all
                          299     ;                          ; 3 = all CS lines (CSx# .. CS0#)                
                          300     ;
                          301     ; R_SALSEL: Segment Address Lines (number of address pins; RSTCON.11 .. RSTCON.12)
 0000                     302     R_SALSEL   EQU     0       ; 0 = 4-bit segment address: A19 .. A16 (default)
                          303     ;                          ; 1 = No segment address lines at all
                          304     ;                          ; 2 = full segment address:  Axx .. A16
                          305     ;                          ; 3 = 2-bit segment address: A17 .. A16
                          306     ;
                          307     ; R_CLKCFG: Clock Generation Mode (XTAL PLL factor; RSTCON.13 .. RSTCON.15)
 0000                     308     R_CLKCFG   EQU     0       ; 0 = CPU CLOCK = XTAL * 2.5
                          309     ;                          ; 1 = CPU CLOCK = XTAL / 2.0
                          310     ;                          ; 2 = CPU CLOCK = XTAL * 1.5
                          311     ;                          ; 3 = CPU CLOCK = XTAL (direct drive)
                          312     ;                          ; 4 = CPU CLOCK = XTAL * 5.0
                          313     ;                          ; 5 = CPU CLOCK = XTAL * 2.0
                          314     ;                          ; 6 = CPU CLOCK = XTAL * 3.0
                          315     ;                          ; 7 = CPU CLOCK = XTAL * 4.0
                          316     ;
                          317     ;------------------------------------------------------------------------------
                          318     ;
                          319     ; BUSCON1/ADDRSEL1 .. BUSCON4/ADDRSEL4 Initialization
                          320     ; ===================================================
                          321     ;
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     6

                          322     ;
                          323     ; BUSCON1/ADDRSEL1
                          324     ; --- Set BUSCON1 = 1 to initialize the BUSCON1/ADDRSEL1 registers
                          325     $SET (BUSCON1 = 0) ; Uv2/Dave
                          326     ;
                          327     ; Define the start address and the address range of Chip Select 1 (CS1#) 
                          328     ; This values are used to set the ADDRSEL1 register
                          329      ; Uv2/Dave
                          330      ; Uv2/Dave
                          331     ;  
                          332     ; MCTC1: Memory Cycle Time (BUSCON1.0 .. BUSCON1.3):
                          333     ; Note: if RDYEN1 == 1 a maximum number of 7 waitstates can be selected
 0004                     334     _MCTC1 EQU 4 ; Uv2/Dave
                          335     ;
                          336     ; RWDC1: Read/Write Signal Delay (BUSCON1.4):
 0000                     337     _RWDC1 EQU 0 ; Uv2/Dave
                          338     ;                       ; 1 = No Delay Time  0   States
                          339     ;
                          340     ; MTTC1: Memory Tri-state Time (BUSCON1.5):
 0000                     341     _MTTC1 EQU 0 ; Uv2/Dave
                          342     ;                       ; 1 = No Delay Time  0   States
                          343     ;
                          344     ; BTYP1: External Bus Configuration Control (BUSCON1.6 .. BUSCON1.7):
 0000                     345     _BTYP1 EQU 0 ; Uv2/Dave
                          346     ;                       ; 1 = 8 Bit Multiplexed
                          347     ;                       ; 2 = 16 Bit Non Multiplexed
                          348     ;                       ; 3 = 16 Bit Multiplexed
                          349     ;
                          350     ; ALECTL1: ALE Lengthening Control Bit (BUSCON1.9):
 0000                     351     _ALECTL1 EQU 0 ; Uv2/Dave
                          352     ;
                          353     ; BUSACT1: Bus Active Control Bit (BUSCON1.10):
 0000                     354     _BUSACT1 EQU 0 ; Uv2/Dave
                          355                             ; = 1 external (ADDRSEL1) bus enabled
                          356     ;
                          357     ; RDYEN1: READY# Input Enable control bit (BUSCON1.12):
 0000                     358     _RDYEN1 EQU 0 ; Uv2/Dave
                          359     ;                       ; 1 = READY# function enabled
                          360     ;
                          361     ; RDY_AS1: Synchronous / Asynchronous READY# Input (BUSCON1.3):
                          362     ; Note: This bit is only valid if _RDYEN1 == 1.
 0000                     363     _RDY_AS1 EQU    0       ; 0 = synchronous READY# input
                          364     ;                       ; 1 = asynchronous READY# input
                          365     ;
                          366     ; CSREN1: Read Chip Select Enable bit (BUSCON1.14):
 0000                     367     _CSREN1 EQU 0 ; Uv2/Dave
                          368     ;                       ; 1 = CS1# is generated for the duration of read
                          369     ;
                          370     ; CSWEN1: Write Chip Select Enable bit (BUSCON1.15):
 0000                     371     _CSWEN1 EQU 0 ; Uv2/Dave
                          372     ;                       ; 1 = CS1# is generated for the duration of write
                          373     ;
                          374     ;
                          375     ; BUSCON2/ADDRSEL2
                          376     ; --- Set BUSCON2 = 1 to initialize the BUSCON2/ADDRSEL2 registers
                          377     $SET (BUSCON2 = 0) ; Uv2/Dave
                          378     ;
                          379     ; Define the start address and the address range of Chip Select 2 (CS2#) 
                          380     ; This values are used to set the ADDRSEL2 register
                          381      ; Uv2/Dave
                          382      ; Uv2/Dave
                          383     ;  
                          384     ; MCTC2: Memory Cycle Time (BUSCON2.0 .. BUSCON2.3):
                          385     ; Note: if RDYEN2 == 1 a maximum number of 7 waitstates can be selected
 000F                     386     _MCTC2 EQU 15 ; Uv2/Dave
                          387     ;
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     7

                          388     ; RWDC2: Read/Write Signal Delay (BUSCON2.4):
 0000                     389     _RWDC2 EQU 0 ; Uv2/Dave
                          390     ;                       ; 1 = No Delay Time  0   States
                          391     ;
                          392     ; MTTC2: Memory Tri-state Time (BUSCON2.5):
 0000                     393     _MTTC2 EQU 0 ; Uv2/Dave
                          394     ;                       ; 1 = No Delay Time  0   States
                          395     ;
                          396     ; BTYP2: External Bus Configuration Control (BUSCON2.6 .. BUSCON2.7):
 0000                     397     _BTYP2 EQU 0 ; Uv2/Dave
                          398     ;                       ; 1 = 8 Bit Multiplexed
                          399     ;                       ; 2 = 16 Bit Non Multiplexed
                          400     ;                       ; 3 = 16 Bit Multiplexed
                          401     ;
                          402     ; ALECTL2: ALE Lengthening Control Bit (BUSCON2.9):
 0000                     403     _ALECTL2 EQU 0 ; Uv2/Dave
                          404     ;
                          405     ; BUSACT2: Bus Active Control Bit (BUSCON2.10):
 0000                     406     _BUSACT2 EQU 0 ; Uv2/Dave
                          407                             ; = 1 external (ADDRSEL2) bus enabled
                          408     ;
                          409     ; RDYEN2: READY# Input Enable control bit (BUSCON2.12):
 0000                     410     _RDYEN2 EQU 0 ; Uv2/Dave
                          411     ;                       ; 1 = READY# function enabled
                          412     ;
                          413     ; RDY_AS2: Synchronous / Asynchronous READY# Input (BUSCON2.3):
                          414     ; Note: This bit is only valid if _RDYEN2 == 1.
 0000                     415     _RDY_AS2 EQU    0       ; 0 = synchronous READY# input
                          416     ;                       ; 1 = asynchronous READY# input
                          417     ;
                          418     ; CSREN2: Read Chip Select Enable bit (BUSCON2.14):
 0000                     419     _CSREN2 EQU 0 ; Uv2/Dave
                          420     ;                       ; 1 = CS2# is generated for the duration of read
                          421     ;
                          422     ; CSWEN2: Write Chip Select Enable bit (BUSCON2.15):
 0000                     423     _CSWEN2 EQU 0 ; Uv2/Dave
                          424     ;                       ; 1 = CS2# is generated for the duration of write
                          425     ;
                          426     ;
                          427     ; BUSCON3/ADDRSEL3
                          428     ; --- Set BUSCON3 = 1 to initialize the BUSCON3/ADDRSEL3 registers
                          429     $SET (BUSCON3 = 0) ; Uv2/Dave
                          430     ;
                          431     ; Define the start address and the address range of Chip Select 3 (CS3#) 
                          432     ; This values are used to set the ADDRSEL3 register
                          433      ; Uv2/Dave
                          434      ; Uv2/Dave
                          435     ;  
                          436     ; MCTC3: Memory Cycle Time (BUSCON3.0 .. BUSCON3.3):
                          437     ; Note: if RDYEN3 == 1 a maximum number of 7 waitstates can be selected
 000F                     438     _MCTC3 EQU 15 ; Uv2/Dave
                          439     ;
                          440     ; RWDC3: Read/Write Signal Delay (BUSCON3.4):
 0000                     441     _RWDC3 EQU 0 ; Uv2/Dave
                          442     ;                       ; 1 = No Delay Time  0   States
                          443     ;
                          444     ; MTTC3: Memory Tri-state Time (BUSCON3.5):
 0000                     445     _MTTC3 EQU 0 ; Uv2/Dave
                          446     ;                       ; 1 = No Delay Time  0   States
                          447     ;
                          448     ; BTYP3: External Bus Configuration Control (BUSCON3.6 .. BUSCON3.7):
 0000                     449     _BTYP3 EQU 0 ; Uv2/Dave
                          450     ;                       ; 1 = 8 Bit Multiplexed
                          451     ;                       ; 2 = 16 Bit Non Multiplexed
                          452     ;                       ; 3 = 16 Bit Multiplexed
                          453     ;
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     8

                          454     ; ALECTL3: ALE Lengthening Control Bit (BUSCON3.9):
 0000                     455     _ALECTL3 EQU 0 ; Uv2/Dave
                          456     ;
                          457     ; BUSACT3: Bus Active Control Bit (BUSCON3.10):
 0000                     458     _BUSACT3 EQU 0 ; Uv2/Dave
                          459                             ; = 1 external (ADDRSEL3) bus enabled
                          460     ;
                          461     ; RDYEN3: READY# Input Enable control bit (BUSCON3.12):
 0000                     462     _RDYEN3 EQU 0 ; Uv2/Dave
                          463     ;                       ; 1 = READY# function enabled
                          464     ;
                          465     ; RDY_AS3: Synchronous / Asynchronous READY# Input (BUSCON3.3):
                          466     ; Note: This bit is only valid if _RDYEN3 == 1.
 0000                     467     _RDY_AS3 EQU    0       ; 0 = synchronous READY# input
                          468     ;                       ; 1 = asynchronous READY# input
                          469     ;
                          470     ; CSREN3: Read Chip Select Enable bit (BUSCON3.14):
 0000                     471     _CSREN3 EQU 0 ; Uv2/Dave
                          472     ;                       ; 1 = CS3# is generated for the duration of read
                          473     ;
                          474     ; CSWEN3: Write Chip Select Enable bit (BUSCON3.15):
 0000                     475     _CSWEN3 EQU 0 ; Uv2/Dave
                          476     ;                       ; 1 = CS3# is generated for the duration of write
                          477     ;
                          478     ;
                          479     ; BUSCON4/ADDRSEL4
                          480     ; --- Set BUSCON4 = 1 to initialize the BUSCON4/ADDRSEL4 registers
                          481     $SET (BUSCON4 = 0) ; Uv2/Dave
                          482     ;
                          483     ; Define the start address and the address range of Chip Select 4 (CS4#) 
                          484     ; This values are used to set the ADDRSEL4 register
                          485      ; Uv2/Dave
                          486      ; Uv2/Dave
                          487     ;  
                          488     ; MCTC4: Memory Cycle Time (BUSCON4.0 .. BUSCON4.3):
                          489     ; Note: if RDYEN4 == 1 a maximum number of 7 waitstates can be selected
 000F                     490     _MCTC4 EQU 15 ; Uv2/Dave
                          491     ;
                          492     ; RWDC4: Read/Write Signal Delay (BUSCON4.4):
 0000                     493     _RWDC4 EQU 0 ; Uv2/Dave
                          494     ;                       ; 1 = No Delay Time  0   States
                          495     ;
                          496     ; MTTC4: Memory Tri-state Time (BUSCON4.5):
 0000                     497     _MTTC4 EQU 0 ; Uv2/Dave
                          498     ;                       ; 1 = No Delay Time  0   States
                          499     ;
                          500     ; BTYP4: External Bus Configuration Control (BUSCON4.6 .. BUSCON4.7):
 0000                     501     _BTYP4 EQU 0 ; Uv2/Dave
                          502     ;                       ; 1 = 8 Bit Multiplexed
                          503     ;                       ; 2 = 16 Bit Non Multiplexed
                          504     ;                       ; 3 = 16 Bit Multiplexed
                          505     ;
                          506     ; ALECTL4: ALE Lengthening Control Bit (BUSCON4.9):
 0000                     507     _ALECTL4 EQU 0 ; Uv2/Dave
                          508     ;
                          509     ; BUSACT4: Bus Active Control Bit (BUSCON4.10):
 0000                     510     _BUSACT4 EQU 0 ; Uv2/Dave
                          511                             ; = 1 external (ADDRSEL4) bus enabled
                          512     ;
                          513     ; RDYEN4: READY# Input Enable control bit (BUSCON4.12):
 0000                     514     _RDYEN4 EQU 0 ; Uv2/Dave
                          515     ;                       ; 1 = READY# function enabled
                          516     ;
                          517     ; RDY_AS4: Synchronous / Asynchronous READY# Input (BUSCON4.3):
                          518     ; Note: This bit is only valid if _RDYEN4 == 1.
 0000                     519     _RDY_AS4 EQU    0       ; 0 = synchronous READY# input
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE     9

                          520     ;                       ; 1 = asynchronous READY# input
                          521     ;
                          522     ; CSREN4: Read Chip Select Enable bit (BUSCON4.14):
 0000                     523     _CSREN4 EQU 0 ; Uv2/Dave
                          524     ;                       ; 1 = CS4# is generated for the duration of read
                          525     ;
                          526     ; CSWEN4: Write Chip Select Enable bit (BUSCON4.15):
 0000                     527     _CSWEN4 EQU 0 ; Uv2/Dave
                          528     ;                       ; 1 = CS4# is generated for the duration of write
                          529     ;
                          530     ;------------------------------------------------------------------------------
                          531     
                                  $IF TINY
                                  $SET (DPPUSE = 0)
                          534     $ENDIF
                          535     
 0000                     536     _STKSZ SET 0 ; Uv2/Dave
 0000                     537     _STKSZ1         SET     0               ; size is 512 Words
                          538     $IF (STK_SIZE = 0)
 0001                     539     _STKSZ1         SET     1               ; size is 256 Words
                          540     $ENDIF
                                  $IF (STK_SIZE = 1)
                                  _STKSZ          SET     1
                                  _STKSZ1         SET     2               ; size is 128 Words
                          544     $ENDIF
                                  $IF (STK_SIZE = 2)
                                  _STKSZ          SET     2
                                  _STKSZ1         SET     3               ; size is  64 Words
                          548     $ENDIF
                                  $IF (STK_SIZE = 3)
                                  _STKSZ          SET     3
                                  _STKSZ1         SET     4               ; size is  32 Words
                          552     $ENDIF
                                  $IF (STK_SIZE = 4)
                                  _STKSZ          SET     4
                          555     $ENDIF
                                  $IF (STK_SIZE = 5)
                                  _STKSZ          SET     5
                          558     $ENDIF
                                  $IF (STK_SIZE = 6)
                                  _STKSZ          SET     6
                          561     $ENDIF
                                  $IF (STK_SIZE = 7)
                                  _STKSZ          SET     7
                          564     $ENDIF
                          565     
                          566     
                          567     $IF NOT TINY
                          568     ASSUME  DPP3:SYSTEM
                          569     ASSUME  DPP2:NDATA
                          570     $ENDIF
                          571     
                          572     NAME    ?C_STARTUP
                          573     PUBLIC  ?C_STARTUP
                          574     
                                  $IF MEDIUM OR LARGE OR HLARGE
                                  Model   LIT     'FAR'
                          577     $ELSE
                          578     Model   LIT     'NEAR'
                          579     $ENDIF
                          580     
                          581     EXTRN   main:NEAR
                          582     
                          583     PUBLIC          ?C_USRSTKBOT
                          584     
--------                  585     ?C_USERSTACK    SECTION DATA PUBLIC 'NDATA'
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    10

                          586     $IF NOT TINY
                          587     NDATA           DGROUP  ?C_USERSTACK
                          588     $ENDIF
                          589     ?C_USRSTKBOT:
00000000                  590                     DS      USTSZ           ; Size of User Stack
                          591     ?C_USERSTKTOP:
--------                  592     ?C_USERSTACK    ENDS
                          593     
                          594     ?C_MAINREGISTERS        REGDEF  R0 - R15
                          595     
                                  $IF (STK_SIZE = 7)
                                  
                                  ?C_SYSSTACK     SECTION DATA PUBLIC 'IDATA'
                                  $IF NOT TINY
                                  SDATA           DGROUP  ?C_SYSSTACK
                                  $ENDIF
                                  _BOS:                                   ; bottom of system stack
                                                  DS      SSTSZ           ; Size of User Stack
                                  _TOS:                                   ; top of system stack
                                  ?C_SYSSTACK     ENDS
                                  
                          607     $ELSE
                          608     ; Setup Stack Overflow
 FC00                     609     _TOS    EQU     0FC00H                          ; top of system stack
 FA00                     610     _BOS    EQU     _TOS - (1024 >> _STKSZ1)        ; bottom of system stack
                          611     $ENDIF
                          612     
                          613     PUBLIC          ?C_SYSSTKBOT
 FA00                     614     ?C_SYSSTKBOT    EQU     _BOS
                          615     
                          616                     SSKDEF  _STKSZ          ; System stack size
                          617     
--------                  618     ?C_STARTUP_CODE SECTION CODE    'ICODE'
                          619     
                          620     
                          621     ;------------------------------------------------------------------------------
                          622     
                          623     ; Special Function Register Addresses
 FF12                     624     SYSCON   DEFR   0FF12H
 FF0C                     625     BUSCON0  DEFR   0FF0CH
 FE12                     626     SP       DEFR   0FE12H
 FE14                     627     STKOV    DEFR   0FE14H
 FE16                     628     STKUN    DEFR   0FE16H
 FFC4                     629     P3       DEFR   0FFC4H
 FFC6                     630     DP3      DEFR   0FFC6H
 FF14                     631     BUSCON1  DEFR   0FF14H
 FF16                     632     BUSCON2  DEFR   0FF16H
 FF18                     633     BUSCON3  DEFR   0FF18H
 FF1A                     634     BUSCON4  DEFR   0FF1AH
 FE18                     635     ADDRSEL1 DEFR   0FE18H
 FE1A                     636     ADDRSEL2 DEFR   0FE1AH
 FE1C                     637     ADDRSEL3 DEFR   0FE1CH
 FE1E                     638     ADDRSEL4 DEFR   0FE1EH
 F1D0                     639     SYSCON2  DEFR   0F1D0H
 F1D4                     640     SYSCON3  DEFR   0F1D4H
                          641     
                          642     
                          643     
                          644     
                          645     
                          646     
                          647     
                          648     
                          649     
                          650     
                          651     
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    11

                          652     
                          653     
                          654     
                          655     
                          656     
                          657     
                          658     
                          659     
                          660     
                          661     
                          662     
                          663     ?C_RESET        PROC TASK C_STARTUP INTNO RESET = 0
                          664     ?C_STARTUP:     LABEL   NEAR
                          665     
                          666     
                          667     $IF (WATCHDOG = 0)
00000000 A55AA5A5         668                     DISWDT                  ; Disable watchdog timer
                          669     $ENDIF
                          670     
                          671     ;@@
                          672     ;       MOV    SYSCON, #1090H
                          673     
                          674     $IF (INIT_XPERCON = 1)
                          675     ; Improtant XPERCON must be set before SYSCON.XPEN is enabled
 F024                     676     XPERCON  DEFR 0F024H
00000004 D180             677                     EXTR    #1
00000006 E612010C         678                     MOV     XPERCON,#V_XPERCON
                          679     $ENDIF
                          680     
 0000                     681     BCON0L          SET     (_MTTC0 << 5) OR (_RWDC0 << 4)
 000E                     682     BCON0L          SET     BCON0L OR ((NOT _MCTC0) AND 0FH)
 000E                     683     BCON0L          SET     BCON0L AND (NOT (_RDYEN0 << 3))
 000E                     684     BCON0L          SET     BCON0L OR (_RDY_AS0 << 3)
 0000                     685     BCON0H          SET     (_ALECTL0 << 1) OR (_RDYEN0 << 4)
 0000                     686     BCON0H          SET     BCON0H OR (_CSREN0 << 6) OR (_CSWEN0 << 7)
                                  $IF (BTYP_ENABLE == 1)
                                  BCON0L          SET     BCON0L OR (_BTYP0 << 6)
                                  BCON0H          SET     BCON0H OR (_BUSACT0 << 2)
                          690     $ENDIF
                          691     
                          692     $IF (BTYP_ENABLE == 0)
0000000A 0A863F0E         693                     BFLDL   BUSCON0,#03FH,#BCON0L
0000000E 1A8600D2         694                     BFLDH   BUSCON0,#0D2H,#BCON0H
                                  $ELSE
                                                  BFLDL   BUSCON0,#0FFH,#BCON0L
                                                  BFLDH   BUSCON0,#0D6H,#BCON0H
                          698     $ENDIF
 FB6F                     699     SYS_BITS        SET     0FB6FH
                          700     
 0010                     701     SYS_H           SET     (_STKSZ << 5) OR (_ROMS1 << 4) OR (_SGTDIS << 3)
 0010                     702     SYS_H           SET     SYS_H OR (_BYTDIS << 1) OR _CLKEN
 0004                     703     SYS_L           SET     _XPERSHARE OR (_VISIBLE << 1) OR (_XPEN << 2)
 0004                     704     SYS_L           SET     SYS_L OR (_BDRSTEN << 3)
 0004                     705     SYS_L           SET     SYS_L OR (_PWDCFG << 5) OR (_CSCFG << 6)
                                  $IF (WRCFG_ENABLE == 1)
                                  SYS_L           SET     SYS_L OR (_WRCFG << 7)
                                  SYS_BITS        SET     SYS_BITS OR 00080H
                          709     $ENDIF
                                  $IF (OWDDIS_ENABLE == 1)
                                  SYS_L           SET     SYS_L OR (_OWDDIS << 4)
                                  SYS_BITS        SET     SYS_BITS OR 00010H
                          713     $ENDIF
                                  $IF (ROMEN_ENABLE == 1)
                                  SYS_H           SET     SYS_H OR (_ROMEN << 2)
                                  SYS_BITS        SET     SYS_BITS OR 00400H
                          717     $ENDIF
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    12

                          718     ; Setup SYSCON Register
                          719     
00000012 1A8910FB         720                     BFLDH   SYSCON,#HIGH SYS_BITS,#SYS_H
00000016 0A896F04         721                     BFLDL   SYSCON,#LOW  SYS_BITS,#SYS_L
                          722     
                          723     ; Setup RSTCON Register
                                  $IF (INIT_RSTCON = 1)
                                  RSTCON          EQU     0F1E0H
                                  V_RSTCON        SET     R_RSTLEN OR (R_SUE << 8) OR (R_CSSEL << 9)
                                  V_RSTCON        SET     R_RSTLEN OR (R_SALSEL << 11) OR (R_CLKCFG << 13)
                                  
                                                  MOV     R1,#V_RSTCON   ; RSTCON value
                                                  MOVW    DPP3:RSTCON,R1
                                                  EXTR    #2
                                                  MOV     SYSCON2,#0500H ; SDD mode, PLL on, factor 2
                                                  MOV     SYSCON2,#0400H ; Switch to basic clock mode
                          734     $ENDIF
                          735     
                          736     ;
                          737     $IF (ADVANCED_SYSCON = 1)
 0000                     738     SYS_2           SET     (PDCON << 4) OR (RTS << 6) OR (SCS << 7)
 0000                     739     SYS_2           SET     SYS_2 OR (CLKCON << 8) OR (CLKREL << 10)
                          740     
 0000                     741     SYS_3           SET     ADCDIS OR (ASC0DIS << 1) OR (SSCDIS << 2)
 0000                     742     SYS_3           SET     SYS_3 OR (GPTDIS << 3)
 0000                     743     SYS_3           SET     SYS_3 OR (FMDIS << 5) OR (CC1DIS << 6) OR (CC2DIS << 7)
 0000                     744     SYS_3           SET     SYS_3 OR (CC6DIS << 8) OR (PWMDIS << 9)
 0000                     745     SYS_3           SET     SYS_3 OR (ASC1DIS << 10) OR (I2CDIS << 11)
 0000                     746     SYS_3           SET     SYS_3 OR (CAN1DIS << 13) OR (CAN2DIS << 14)
 0000                     747     SYS_3           SET     SYS_3 OR (PCDDIS << 15)
                          748     
0000001A D190             749                     EXTR    #2
0000001C E6E80000         750                     MOV     SYSCON2,#SYS_2
00000020 E6EA0000         751                     MOV     SYSCON3,#SYS_3
                          752     $ENDIF
                          753     ;
                          754     
                                  $IF (BUSCON1 = 1)
                                  BCON1           SET     (_MTTC1 << 5) OR (_RWDC1 << 4)
                                  BCON1           SET     BCON1 OR ((NOT _MCTC1) AND 0FH)
                                  BCON1           SET     BCON1 AND (NOT (_RDYEN1 << 3))
                                  BCON1           SET     BCON1 OR (_RDY_AS1 << 3)  OR (_BTYP1 << 6)
                                  BCON1           SET     BCON1 OR (_ALECTL1 << 9) OR (_BUSACT1 << 10)
                                  BCON1           SET     BCON1 OR (_RDYEN1 << 12) OR (_CSREN1 << 14)
                                  BCON1           SET     BCON1 OR (_CSWEN1 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR1    EQU     00H
                                  
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    13

                                                  MOV     ADDRSEL1,#ADDR1 
                                                  MOV     BUSCON1,#BCON1
                          786     $ENDIF
                          787     
                                  $IF (BUSCON2 = 1)
                                  BCON2           SET     (_MTTC2 << 5) OR (_RWDC2 << 4)
                                  BCON2           SET     BCON2 OR ((NOT _MCTC2) AND 0FH)
                                  BCON2           SET     BCON2 AND (NOT (_RDYEN2 << 3))
                                  BCON2           SET     BCON2 OR (_RDY_AS2 << 3)  OR (_BTYP2 << 6)
                                  BCON2           SET     BCON2 OR (_ALECTL2 << 9) OR (_BUSACT2 << 10)
                                  BCON2           SET     BCON2 OR (_RDYEN2 << 12) OR (_CSREN2 << 14)
                                  BCON2           SET     BCON2 OR (_CSWEN2 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR2    EQU     00H
                                  
                                                  MOV     ADDRSEL2,#ADDR2 
                                                  MOV     BUSCON2,#BCON2
                          819     $ENDIF
                          820     
                                  $IF (BUSCON3 = 1)
                                  BCON3           SET     (_MTTC3 << 5) OR (_RWDC3 << 4)
                                  BCON3           SET     BCON3 OR ((NOT _MCTC3) AND 0FH)
                                  BCON3           SET     BCON3 AND (NOT (_RDYEN3 << 3))
                                  BCON3           SET     BCON3 OR (_RDY_AS3 << 3)  OR (_BTYP3 << 6)
                                  BCON3           SET     BCON3 OR (_ALECTL3 << 9) OR (_BUSACT3 << 10)
                                  BCON3           SET     BCON3 OR (_RDYEN3 << 12) OR (_CSREN3 << 14)
                                  BCON3           SET     BCON3 OR (_CSWEN3 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR3    EQU     00H
                                  
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    14

                                                  MOV     ADDRSEL3,#ADDR3 
                                                  MOV     BUSCON3,#BCON3
                          852     $ENDIF
                          853     
                                  $IF (BUSCON4 = 1)
                                  BCON4           SET     (_MTTC4 << 5) OR (_RWDC4 << 4)
                                  BCON4           SET     BCON4 OR ((NOT _MCTC4) AND 0FH)
                                  BCON4           SET     BCON4 AND (NOT (_RDYEN4 << 3))
                                  BCON4           SET     BCON4 OR (_RDY_AS4 << 3)  OR (_BTYP4 << 6)
                                  BCON4           SET     BCON4 OR (_ALECTL4 << 9) OR (_BUSACT4 << 10)
                                  BCON4           SET     BCON4 OR (_RDYEN4 << 12) OR (_CSREN4 << 14)
                                  BCON4           SET     BCON4 OR (_CSWEN4 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR4    EQU     00H
                                  
                                                  MOV     ADDRSEL4,#ADDR4 
                                                  MOV     BUSCON4,#BCON4
                          885     $ENDIF
                          886     
                          887     
                          888     
                                  $IF (STK_SIZE = 7)
                                                  MOV     STKUN,#0FFFEH           ; AVOID STKUN TRAP
                                                  MOV     STKOV,#0H               ; AVOID STKOV TRAP
                                                  MOV     SP,#DPP3:_TOS           ; INITIALIZE STACK POINTER
                                                  MOV     STKUN,#DPP3:_TOS        ; INITIALIZE STACK UNFL REGISTER
                                                  MOV     STKOV,#DPP3:(_BOS+6*2)  ; INITIALIZE STACK OVFL REGISTER
                          895     $ELSE
00000024 E60A0CFA         896                     MOV     STKOV,#(_BOS+6*2)       ; INITIALIZE STACK OVFL REGISTER
                          897     $ENDIF
                          898     
                          899     $IF NOT TINY
                          900     
                          901                     EXTRN   ?C_PAGEDPP0 : DATA16
                          902                     EXTRN   ?C_PAGEDPP1 : DATA16
                          903                     EXTRN   ?C_PAGEDPP2 : DATA16
                          904     
                          905     $IF (DPPUSE = 1)
00000028 E600???? E       906                     MOV     DPP0,#?C_PAGEDPP0       ; INIT DPP0 VALUE
                          907     $ENDIF
0000002C E601???? E       908                     MOV     DPP1,#?C_PAGEDPP1       ; DEFAULT NEAR CONST PAGE
00000030 E602???? E       909                     MOV     DPP2,#?C_PAGEDPP2       ; DEFAULT NEAR DATA  PAGE
                          910     
                          911     $ENDIF
                          912     
00000034 E608???? R       913                     MOV     CP,#?C_MAINREGISTERS
00000038 B54AB5B5         914                     EINIT
                          915     
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    15

                          916     ;$IF NOT TINY
                          917     ;               MOV     R0,#DPP2:?C_USERSTKTOP
                          918     ;$ELSE
0000003C E6F0???? R       919                     MOV     R0,#?C_USERSTKTOP
                          920     ;$ENDIF
                          921     
                          922     
                          923     ;------------------------------------------------------------------------------
                          924     ;
                          925     ; The following code is necessary to set RAM variables to 0 at start-up
                          926     ; (RESET) of the C application program.
                          927     ;
                          928     
                          929     $IF (CLR_MEMORY = 1)
                          930     
                          931                     EXTRN   ?C_CLRMEMSECSTART : WORD
                          932     Clr_Memory:
                                  $IF TINY
                                                  MOV     R8,#?C_CLRMEMSECSTART
                                                  JMPR    cc_Z,EndClear
                                  
                                  RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R5,#0
                                                  MOV     R2,[R8+]    ; Count
                                                  JMPR    cc_Z,EndClear
                                                  MOV     R3,R2
                                                  MOV     R4,[R8+]
                                                  JBC     R2.14,ClearNear
                                  
                                  ClearBit:       MOV     R3,R4
                                                  SHR     R3,#3
                                                  BCLR    R3.0
                                                  ADD     R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R5,#1
                                                  SHL     R5,R4
                                                  CPL     R5
                                                  AND     R5,[R3]
                                                  MOV     [R3],R5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,ClearBit
                                                  JMPR    cc_UC,RepeatClear
                                  
                                  ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOVB    [R4],RL5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NN,ClearNear
                                                  JMPR    cc_UC,RepeatClear
                                  
                          972     $ELSE
00000040 E6F9???? E       973                     MOV     R9,#SEG (?C_CLRMEMSECSTART)
00000044 E6F8???? E       974                     MOV     R8,#SOF (?C_CLRMEMSECSTART)
00000048 F018             975                     MOV     R1,R8           
0000004A 7019             976                     OR      R1,R9
0000004C 2D29             977                     JMPR    cc_Z,EndClear
                          978     
                          979     RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    16

                          982     $ENDIF
0000004E E005             983                     MOV     R5,#0
00000050 DC09             984                     EXTS    R9,#1
00000052 9828             985                     MOV     R2,[R8+]    ; Count
00000054 2D25             986                     JMPR    cc_Z,EndClear
00000056 F032             987                     MOV     R3,R2
00000058 DC09             988                     EXTS    R9,#1
0000005A 9848             989                     MOV     R4,[R8+]
0000005C AAF21BE0         990                     JBC     R2.14,ClearNear
00000060 AAF20EF0         991                     JBC     R2.15,ClearFar
                          992     
00000064 F034             993     ClearBit:       MOV     R3,R4
00000066 7C33             994                     SHR     R3,#3
00000068 0EF3             995                     BCLR    R3.0
0000006A 06F300FD         996                     ADD     R3,#0FD00H              ; START OF BIT SPACE
0000006E E015             997                     MOV     R5,#1
00000070 4C54             998                     SHL     R5,R4
00000072 9150             999                     CPL     R5
00000074 685B            1000                     AND     R5,[R3]
00000076 B853            1001                     MOV     [R3],R5
00000078 0841            1002                     ADD     R4,#1
0000007A 2821            1003                     SUB     R2,#1
0000007C 3DF3            1004                     JMPR    cc_NZ,ClearBit
0000007E 0DE7            1005                     JMPR    cc_UC,RepeatClear
                         1006     
00000080 DC09            1007     ClearFar:       EXTS    R9,#1
00000082 9838            1008                     MOV     R3,[R8+]
                         1009     RepClearFar:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1012     $ENDIF
00000084 DC44            1013                     EXTP    R4,#1
00000086 B9A3            1014                     MOVB    [R3],RL5
00000088 0831            1015                     ADD     R3,#1
0000008A 1840            1016                     ADDC    R4,#0
0000008C 76F300C0        1017                     OR      R3,#0C000H
00000090 2821            1018                     SUB     R2,#1
00000092 7DF8            1019                     JMPR    cc_NN,RepClearFar
00000094 0DDC            1020                     JMPR    cc_UC,RepeatClear
                         1021     
                         1022     ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1025     $ENDIF
00000096 B9A4            1026                     MOVB    [R4],RL5
00000098 0841            1027                     ADD     R4,#1
0000009A 2821            1028                     SUB     R2,#1
0000009C 7DFC            1029                     JMPR    cc_NN,ClearNear
0000009E 0DD7            1030                     JMPR    cc_UC,RepeatClear
                         1031     $ENDIF
                         1032     
                         1033     EndClear:
                         1034     
                         1035     $ENDIF
                         1036     
                         1037     ;------------------------------------------------------------------------------
                         1038     ;
                         1039     ;  The following code is necessary, if the application program contains
                         1040     ;  initialized variables at file level.
                         1041     ;
                         1042     
                         1043     $IF (INIT_VARS = 1) ; *********************************************************
                         1044     
                         1045                     EXTRN   ?C_INITSECSTART : WORD
                         1046     Init_Vars:
                                  $IF TINY ; ********************************************************************
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    17

                                                  MOV     R8,#?C_INITSECSTART
                                  RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R2,[R8+]
                                                  JMPR    cc_Z,EndInit
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  MOV     R2,[R8+]
                                  LenLoad:        MOV     R3,[R8+]
                                  CopyInitVal:    MOVB    [R3],[R8+]
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  ADD     R3,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  EndInit:
                                  
                         1089     $ELSE ; $IF TINY **************************************************************
000000A0 E6F9???? E      1090                     MOV     R9,#SEG (?C_INITSECSTART)
000000A4 E6F8???? E      1091                     MOV     R8,#SOF (?C_INITSECSTART)
                         1092     $IF (DPP3USE = 1) ; ***********************************************************
                         1093     RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1096     $ENDIF
000000A8 E6030300        1097                     MOV     DPP3,#3
000000AC DC09            1098                     EXTS    R9,#1
000000AE A828            1099                     MOV     R2,[R8]
000000B0 2D3C            1100                     JMPR    cc_Z,EndInit
000000B2 0882            1101                     ADD     R8,#2
000000B4 1890            1102                     ADDC    R9,#0
000000B6 AAF229F0        1103                     JBC     R2.15,InitBit
000000BA F042            1104                     MOV     R4,R2
000000BC 66F2FF3F        1105                     AND     R2,#3FFFH
000000C0 3D05            1106                     JMPR    cc_NZ,LenLoad
000000C2 E004            1107                     MOV     R4,#0
000000C4 DC09            1108                     EXTS    R9,#1
000000C6 A828            1109                     MOV     R2,[R8]
000000C8 0882            1110                     ADD     R8,#2
000000CA 1890            1111                     ADDC    R9,#0
000000CC DC09            1112     LenLoad:        EXTS    R9,#1
000000CE A838            1113                     MOV     R3,[R8]
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    18

000000D0 0882            1114                     ADD     R8,#2
000000D2 1890            1115                     ADDC    R9,#0
000000D4 8AF406E0        1116                     JB      R4.14,CopyInitVal
000000D8 F6F306FE        1117                     MOV     DPP3,R3
000000DC DC09            1118                     EXTS    R9,#1
000000DE A838            1119                     MOV     R3,[R8]
000000E0 0882            1120                     ADD     R8,#2
000000E2 1890            1121                     ADDC    R9,#0
000000E4 DC09            1122     CopyInitVal:    EXTS    R9,#1
000000E6 A9A8            1123                     MOVB    RL5,[R8]
000000E8 0881            1124                     ADD     R8,#1
000000EA 1890            1125                     ADDC    R9,#0
000000EC B9A3            1126                     MOVB    [R3],RL5
000000EE 0831            1127                     ADD     R3,#1
000000F0 8AF406E0        1128                     JB      R4.14,NoDPP3Adj
000000F4 8AF304E0        1129                     JB      R3.14,NoDPP3Adj
000000F8 06030100        1130                     ADD     DPP3,#1
000000FC 76F300C0        1131                     OR      R3,#0C000H              ; SET DPP3 Bits 
                         1132     NoDPP3Adj:      
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1135     $ENDIF
00000100 2821            1136                     SUB     R2,#1
00000102 3DF0            1137                     JMPR    cc_NZ,CopyInitVal
00000104 9AF8D000        1138                     JNB     R8.0,RepeatInit
00000108 0881            1139                     ADD     R8,#1
0000010A 0DCE            1140                     JMPR    cc_UC,RepeatInit
                         1141     
0000010C C043            1142     InitBit:        MOVBZ   R3,RL2
0000010E 5C13            1143                     SHL     R3,#1
00000110 76F300FD        1144                     OR      R3,#0FD00H              ; START OF BIT SPACE
00000114 E014            1145                     MOV     R4,#1
00000116 F1A5            1146                     MOVB    RL5,RH2
00000118 4C45            1147                     SHL     R4,R5                   ; CALCULATE BIT MASK
0000011A 8AF20370        1148                     JB      R2.7,SetBit
0000011E 9140            1149                     CPL     R4                      ; CLEAR BIT
00000120 684B            1150                     AND     R4,[R3]
00000122 0D01            1151                     JMPR    cc_UC,StoreBit
00000124 784B            1152     SetBit:         OR      R4,[R3]                 ; SET BIT
00000126 B843            1153     StoreBit:       MOV     [R3],R4
00000128 0DBF            1154                     JMPR    cc_UC,RepeatInit
                         1155     
                                  $ELSE ; block IF (DPP3USE = 1) ************************************************
                                  RepeatInit:       
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  JMPR    cc_Z,EndInit
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  LenLoad:        EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JB      R4.14,CopyNearVal
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    19

                                                  MOV     R6,R3
                                                  EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  CopyInitVal:    OR      R6,#0C000H
                                                  EXTP    R6,#1
                                                  MOV     [R3],RL5
                                                  ADD     R3,#1
                                                  ADDC    R6,#0
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JMPR    cc_UC,CopyInitDone
                                  
                                  
                                  CopyNearVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  MOVB    [R3],RL5
                                                  ADD     R3,#1
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyNearVal
                                  CopyInitDone:   JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                         1226     $ENDIF ; close block IF (DPP3USE = 1) **************************************** 
                         1227     
                         1228     EndInit:
                         1229     
                         1230     $ENDIF ; close block $IF TINY ************************************************ 
                         1231     
                         1232     $ENDIF ; close $IF (INIT_VARS = 1) ******************************************* 
                         1233     
                         1234     ;------------------------------------------------------------------------------
                         1235     
                                  $IF TINY
                                                  JMP     main
                         1238     $ELSE
0000012A FA?????? E      1239                     JMP     FAR main
                         1240     $ENDIF
                         1241     
                         1242     ?C_RESET        ENDP
--------                 1243     ?C_STARTUP_CODE ENDS
                         1244     
                         1245     $IF (INIT_VARS = 1)
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    20

                         1246     EXTERN  ?C_ENDINIT:WORD
                         1247     $ENDIF
                         1248     
                         1249     ;******************************************************************************
                         1250     ;                                                                             *
                         1251     ; STRUCTURE OF THE INITIALIZATION INFORMATION                                 *
                         1252     ; -------------------------------------------                                 *
                         1253     ; This section describes the initialization data generated by:                *
                         1254     ;   - C166 for explicit variable initializations (in ?C_INITSEC)              *
                         1255     ;   - L166 to clear memory regions (in ?C_CLRMEMSEC)                          *
                         1256     ;                                                                             *
                         1257     ; Explicit variable initilizations at C source level are stored by C166 in    *
                         1258     ; the section ?C_INITSEC.  All partial sections are combined at linker level  *
                         1259     ; to one section.  The section end value DW 0 taken from the library module   *
                         1260     ; ?C_ENDINIT.  This module is included with the ?C_ENDINIT symbol definition. *
                         1261     ;                                                                             *
                         1262     ; Structure of the ?C_INITSEC information:                                    *
                         1263     ;     ?C_INITSECSTART:   [start address label]                                *
                         1264     ;     <typ> + <length>   [WORD]                       ----+      repeated         *
                         1265     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         1266     ;     <init_data>        [BYTES according to length]  ----+  repeated         *
                         1267     ;     0x0000             [WORD]   <end of list mark>                          *
                         1268     ; Whereby:                                                                    *
                         1269     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         1270     ;             0x0000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         1271     ;             0x8080: set bit                                                 *
                         1272     ;             0x8000: clear bit                                               *
                         1273     ;   <init_data> :=    bytes to copy into memory specified by <address>        *
                         1274     ;   For bit initilizations (<typ> = 0x80x0) the address is encoded in the     *
                         1275     ;   <length> field and no further address information is generated.  MSB of   *
                         1276     ;   <length> is the bit pos.  LSB of <length> is the bit address.             *
                         1277     ;                                                                             *
                         1278     ;                                                                             *
                         1279     ; Sections that start with ?xx0? are set to zero in the startup code.  The    *
                         1280     ; address information about these sections are stored by L166 in the section  *
                         1281     ; ?C_CLRMEMSEC.                                                               *
                         1282     ;                                                                             *
                         1283     ; Structure of the ?C_CLRMERSEC information:                                  *
                         1284     ;     ?C_CLRMEMSECSTART: [start address label]                                *
                         1285     ;     <typ> + <length>   [WORD]                       ----+  repeated         *
                         1286     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         1287     ;     0x0000             [WORD]   <end of list mark>                          *
                         1288     ; Whereby:                                                                    *
                         1289     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         1290     ;             0x8000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         1291     ;             0x0000: bit area                                                *
                         1292     ;   For bit areas (<typ> = 0x0000) the address is encoded as WORD with LSB    *
                         1293     ;   as byte offset to 0xFD00 and MSB as bit number in the addressed byte.     *
                         1294     ;                                                                             *
                         1295     ;******************************************************************************
                         1296     
                         1297                     END
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    21

SYMBOL TABLE LISTING
------ ----- -------


N A M E             TYPE   VALUE             I  ATTRIBUTES

?C_CLRMEMSECSTART.  WORD   ----                 EXT 
?C_ENDINIT . . . .  WORD   ----                 EXT 
?C_INITSECSTART. .  WORD   ----                 EXT 
?C_MAINREGISTERS .  RBANK                       REGBANK
?C_PAGEDPP0. . . .  DATA16 ----                 EXT 
?C_PAGEDPP1. . . .  DATA16 ----                 EXT 
?C_PAGEDPP2. . . .  DATA16 ----                 EXT 
?C_RESET . . . . .  I-FAR  0H                R  SEC=?C_STARTUP_CODE
?C_STARTUP . . . .  NEAR   0H                R  PUB SEC=?C_STARTUP_CODE
?C_STARTUP_CODE. .  ----   ----              R  SECTION
?C_SYSSTKBOT . . .  DATA16 FA00H             A  PUB 
?C_USERSTACK . . .  ----   ----              R  SECTION
?C_USERSTKTOP. . .  BYTE   1000H             R  SEC=?C_USERSTACK
?C_USRSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_USERSTACK
ADCDIS . . . . . .  DATA3  0H                A  
ADDRSEL1 . . . . .  WORD   FE18H             A  SFR
ADDRSEL2 . . . . .  WORD   FE1AH             A  SFR
ADDRSEL3 . . . . .  WORD   FE1CH             A  SFR
ADDRSEL4 . . . . .  WORD   FE1EH             A  SFR
ASC0DIS. . . . . .  DATA3  0H                A  
ASC1DIS. . . . . .  DATA3  0H                A  
BCON0H . . . . . .  DATA3  0H                A  
BCON0L . . . . . .  DATA4  EH                A  
BUSCON0. . . . . .  WORD   FF0CH             A  SFR
BUSCON1. . . . . .  WORD   FF14H             A  SFR
BUSCON2. . . . . .  WORD   FF16H             A  SFR
BUSCON3. . . . . .  WORD   FF18H             A  SFR
BUSCON4. . . . . .  WORD   FF1AH             A  SFR
CAN1DIS. . . . . .  DATA3  0H                A  
CAN2DIS. . . . . .  DATA3  0H                A  
CC1DIS . . . . . .  DATA3  0H                A  
CC2DIS . . . . . .  DATA3  0H                A  
CC6DIS . . . . . .  DATA3  0H                A  
CLKCON . . . . . .  DATA3  0H                A  
CLKREL . . . . . .  DATA3  0H                A  
CP . . . . . . . .  WORD   FE10H             A  SFR
C_STARTUP. . . . .  ----   ----                 
ClearBit . . . . .  NEAR   64H               R  SEC=?C_STARTUP_CODE
ClearFar . . . . .  NEAR   80H               R  SEC=?C_STARTUP_CODE
ClearNear. . . . .  NEAR   96H               R  SEC=?C_STARTUP_CODE
Clr_Memory . . . .  NEAR   40H               R  SEC=?C_STARTUP_CODE
CopyInitVal. . . .  NEAR   E4H               R  SEC=?C_STARTUP_CODE
DP3. . . . . . . .  WORD   FFC6H             A  SFR
DPP0 . . . . . . .  WORD   FE00H             A  SFR
DPP1 . . . . . . .  WORD   FE02H             A  SFR
DPP2 . . . . . . .  WORD   FE04H             A  SFR
DPP3 . . . . . . .  WORD   FE06H             A  SFR
EndClear . . . . .  NEAR   A0H               R  SEC=?C_STARTUP_CODE
EndInit. . . . . .  NEAR   12AH              R  SEC=?C_STARTUP_CODE
FMDIS. . . . . . .  DATA3  0H                A  
GPTDIS . . . . . .  DATA3  0H                A  
I2CDIS . . . . . .  DATA3  0H                A  
InitBit. . . . . .  NEAR   10CH              R  SEC=?C_STARTUP_CODE
Init_Vars. . . . .  NEAR   A0H               R  SEC=?C_STARTUP_CODE
LenLoad. . . . . .  NEAR   CCH               R  SEC=?C_STARTUP_CODE
Model. . . . . . .  LIT    "NEAR"               
NDATA. . . . . . .  ----   ----                 GROUP
NoDPP3Adj. . . . .  NEAR   100H              R  SEC=?C_STARTUP_CODE
P3 . . . . . . . .  WORD   FFC4H             A  SFR
PCDDIS . . . . . .  DATA3  0H                A  
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    22

PDCON. . . . . . .  DATA3  0H                A  
PWMDIS . . . . . .  DATA3  0H                A  
RESET. . . . . . .  INTNO  0000H             A  GLB 
RTS. . . . . . . .  DATA3  0H                A  
R_CLKCFG . . . . .  DATA3  0H                A  
R_CSSEL. . . . . .  DATA3  0H                A  
R_RSTLEN . . . . .  DATA3  0H                A  
R_SALSEL . . . . .  DATA3  0H                A  
R_SUE. . . . . . .  DATA3  0H                A  
RepClearFar. . . .  NEAR   84H               R  SEC=?C_STARTUP_CODE
RepeatClear. . . .  NEAR   4EH               R  SEC=?C_STARTUP_CODE
RepeatInit . . . .  NEAR   A8H               R  SEC=?C_STARTUP_CODE
SCS. . . . . . . .  DATA3  0H                A  
SP . . . . . . . .  WORD   FE12H             A  SFR
SSCDIS . . . . . .  DATA3  0H                A  
SSTSZ. . . . . . .  DATA16 200H              A  
STKOV. . . . . . .  WORD   FE14H             A  SFR
STKUN. . . . . . .  WORD   FE16H             A  SFR
SYSCON . . . . . .  WORD   FF12H             A  SFR
SYSCON2. . . . . .  WORD   F1D0H             A  ESFR
SYSCON3. . . . . .  WORD   F1D4H             A  ESFR
SYS_2. . . . . . .  DATA3  0H                A  
SYS_3. . . . . . .  DATA3  0H                A  
SYS_BITS . . . . .  DATA16 FB6FH             A  
SYS_H. . . . . . .  DATA8  10H               A  
SYS_L. . . . . . .  DATA3  4H                A  
SetBit . . . . . .  NEAR   124H              R  SEC=?C_STARTUP_CODE
StoreBit . . . . .  NEAR   126H              R  SEC=?C_STARTUP_CODE
USTSZ. . . . . . .  DATA16 1000H             A  
V_XPERCON. . . . .  DATA16 C01H              A  
XPERCON. . . . . .  WORD   F024H             A  ESFR
_ALECTL0 . . . . .  DATA3  0H                A  
_ALECTL1 . . . . .  DATA3  0H                A  
_ALECTL2 . . . . .  DATA3  0H                A  
_ALECTL3 . . . . .  DATA3  0H                A  
_ALECTL4 . . . . .  DATA3  0H                A  
_BDRSTEN . . . . .  DATA3  0H                A  
_BOS . . . . . . .  DATA16 FA00H             A  
_BTYP0 . . . . . .  DATA3  2H                A  
_BTYP1 . . . . . .  DATA3  0H                A  
_BTYP2 . . . . . .  DATA3  0H                A  
_BTYP3 . . . . . .  DATA3  0H                A  
_BTYP4 . . . . . .  DATA3  0H                A  
_BUSACT0 . . . . .  DATA3  1H                A  
_BUSACT1 . . . . .  DATA3  0H                A  
_BUSACT2 . . . . .  DATA3  0H                A  
_BUSACT3 . . . . .  DATA3  0H                A  
_BUSACT4 . . . . .  DATA3  0H                A  
_BYTDIS. . . . . .  DATA3  0H                A  
_CLKEN . . . . . .  DATA3  0H                A  
_CSCFG . . . . . .  DATA3  0H                A  
_CSREN0. . . . . .  DATA3  0H                A  
_CSREN1. . . . . .  DATA3  0H                A  
_CSREN2. . . . . .  DATA3  0H                A  
_CSREN3. . . . . .  DATA3  0H                A  
_CSREN4. . . . . .  DATA3  0H                A  
_CSWEN0. . . . . .  DATA3  0H                A  
_CSWEN1. . . . . .  DATA3  0H                A  
_CSWEN2. . . . . .  DATA3  0H                A  
_CSWEN3. . . . . .  DATA3  0H                A  
_CSWEN4. . . . . .  DATA3  0H                A  
_MCTC0 . . . . . .  DATA3  1H                A  
_MCTC1 . . . . . .  DATA3  4H                A  
_MCTC2 . . . . . .  DATA4  FH                A  
_MCTC3 . . . . . .  DATA4  FH                A  
_MCTC4 . . . . . .  DATA4  FH                A  
A166 MACRO ASSEMBLER  START167                                                            12/11/2008 08:49:47 PAGE    23

_MTTC0 . . . . . .  DATA3  0H                A  
_MTTC1 . . . . . .  DATA3  0H                A  
_MTTC2 . . . . . .  DATA3  0H                A  
_MTTC3 . . . . . .  DATA3  0H                A  
_MTTC4 . . . . . .  DATA3  0H                A  
_OWDDIS. . . . . .  DATA3  0H                A  
_PWDCFG. . . . . .  DATA3  0H                A  
_RDYEN0. . . . . .  DATA3  0H                A  
_RDYEN1. . . . . .  DATA3  0H                A  
_RDYEN2. . . . . .  DATA3  0H                A  
_RDYEN3. . . . . .  DATA3  0H                A  
_RDYEN4. . . . . .  DATA3  0H                A  
_RDY_AS0 . . . . .  DATA3  0H                A  
_RDY_AS1 . . . . .  DATA3  0H                A  
_RDY_AS2 . . . . .  DATA3  0H                A  
_RDY_AS3 . . . . .  DATA3  0H                A  
_RDY_AS4 . . . . .  DATA3  0H                A  
_ROMEN . . . . . .  DATA3  0H                A  
_ROMS1 . . . . . .  DATA3  1H                A  
_RWDC0 . . . . . .  DATA3  0H                A  
_RWDC1 . . . . . .  DATA3  0H                A  
_RWDC2 . . . . . .  DATA3  0H                A  
_RWDC3 . . . . . .  DATA3  0H                A  
_RWDC4 . . . . . .  DATA3  0H                A  
_SGTDIS. . . . . .  DATA3  0H                A  
_STKSZ . . . . . .  DATA3  0H                A  
_STKSZ1. . . . . .  DATA3  1H                A  
_TOS . . . . . . .  DATA16 FC00H             A  
_VISIBLE . . . . .  DATA3  0H                A  
_WRCFG . . . . . .  DATA3  1H                A  
_XPEN. . . . . . .  DATA3  1H                A  
_XPERSHARE . . . .  DATA3  0H                A  
main . . . . . . .  NEAR   ----                 EXT 



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
