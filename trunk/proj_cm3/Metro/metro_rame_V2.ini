/* Analog0(float Maxi)
* Simule la dynamique d'une Rame de métro :
*  entrée du modèle : 
*    Vin : valeur du
*         par le signal PWM du PortA.1 (direct)  ou 2 (reverse)
*  sortie du modèle	:
*    OptoA,OptoB : les signaux des opto-coupleurs vues sur 
*  variables locales :
*    vitesse : vitesse linéaire de la trottinette
*    angle : (en pas) de la roue
*/

/* Modèle continu
    V(m/s)		    K		
  __________  = __________ 
  
  Vin(volts)	 1 + Tau.p	

*/ 


/* Modèle discret de la rame  pour un premier oprdre
                                  -1
      K		bilinéaire		1  + z					   K				 1 - 2.Tau/Te
  __________ =====> K0 . _____________  avec K0 = _____________  et b1 = ______________ 
                                     -1
  1 + Tau. p			   1  + b1. z			   1 + 2.Tau/Te		  1 + 2.Tau/Te

d'où 
y[k] = -b1.y[k-1] + K0.(e[k]+e[k-1])

*/

define float DEBUGvitesse ;
define long DEBUGposition ;
Signal void Metro_Avec_Optos (void)
{ 
		float Te,K,Tau,K0,bb1,VitMax,vitesse,angle;
		float Kp,Tw,z,Tz,Vin,VinV,VinVV,cour,courV,courVV;
		float a0,a1,a2,b0,b1,b2;
		int int_angle;

		VitMax = 2200.0; // pas/s			
		Te = 1.0/VitMax/4.0/10.0;
		printf("Te=%f\n",Te);
		
		// Fon. Transfert de vitesse
		K = 0.4979;
		Tau= 0.3040;
	
		K0 = K/(1.0+2.0*Tau/Te);
		bb1 = (1.0-2.0*Tau/Te)/(1.0+2.0*Tau/Te);
 
		//Fon. transfert de courant
        Kp = 0.35436 *3.3/(float)(0x0FFF);
       	Tw = 0.022858;
       	z = 6.4233;
       	Tz = 0.78006;
		
      a0=1.0+2.0*Tz/Te;
      a1=2.0;
      a2=1.0-2.0*Tz/Te;
      b0=1.0+4.0*z*Tw/Te+4.0*Tw*Tw/Te/Te;
      b1=2.0-8.0*Tw*Tw/Te/Te;
      b2=1.0-4.0*z*Tw/Te+4.0*Tw*Tw/Te/Te;
      a0=Kp*a0/b0;
      a1=Kp*a1/b0;
      a2=Kp*a2/b0;
      b1=b1/b0;
      b2=b2/b0;		

		angle=0.0;
		vitesse = 0.0;
		courV=0.0;
		courVV=0.0;
		VinV=0.0;
		VinVV=0.0;


		while (1) {

			//1 boucle rapide des optos
				swatch(Te);
				
			   //1 Calcul de l'angle et génération des optos
				angle  =  angle +  vitesse * Te;
	 			int_angle = (int) (angle);
				TIM3_CNT = int_angle;
		    	if (int_angle & 2) PORTA = PORTA | (1<<6);	 
				else PORTA = PORTA & ~(1<<6);
				int_angle--;
				if (int_angle & 2) PORTA = PORTA | (1<<7);
				else PORTA = PORTA & ~(1<<7);

			if (TIM2_CCER & (1<<4))
				// CC2_ON (recule)
				Vin = -((float) TIM2_CCR2);
			else if (TIM2_CCER & (1<<8))
				//CC3_ON  (avance)
				Vin = ((float) TIM2_CCR3);
			else
				Vin = 0.0;
		
			//1 Calcul de la récurrence de vitesse
			//Pour un premier ordre
			vitesse = -bb1 * vitesse + K0 * (Vin+VinV) ;
			DEBUGvitesse = vitesse;
			//1 saturation de la vitesse
			if (vitesse>VitMax) vitesse=VitMax;
			if (vitesse<-VitMax) vitesse=-VitMax;
			
			//1 calcul du courant

			cour = a0*Vin + a1*VinV + a2*VinVV -b1*courV -b2*courVV;
			ADC1_IN12= cour;
			VinVV=VinV;
			VinV = Vin;
			courVV = courV;
			courV= cour;
		
		}
}
KILL button *
define button "Lance Metro","Metro_Avec_Optos()"
define button "print pos","radix=10;TIM3_CNT"  
define button "LA Optos","LA PORTA & (1<<6) ; LA PORTA & (1<<7)"
define button "LA Pos","LA TIM3_CNT"
define button "LA Com+","LA TIM2_CCR3"