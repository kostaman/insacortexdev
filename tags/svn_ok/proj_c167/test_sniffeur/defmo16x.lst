C166 COMPILER V6.08, DEFMO16X                                                              12/11/2008 08:49:51 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE DEFMO16X
OBJECT MODULE PLACED IN .\defmo16x.obj
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE ..\..\includes\libCAN\defmo16x.c BROWSE INCDIR(..\..\libs_thierr
                    -y\SourceC167\Developpement_Capcom_V2) MOD167 DEBUG PRINT(.\defmo16x.lst) OBJECT(.\defmo16x.obj) 

 stmt lvl     source

    1         /* ----------------------------------------- header: ----------------*/
    2         /*********************************************************************
    3          * Program name:        "DEFMO16X.C"                                 *
    4          * Compiler used:       BSO/Tasking C166                             *
    5          * Task:                Source File for procedure def_mo_16x         *
    6          *                      belonging to Siemens ApNote AP2922           *
    7          *                      "'C' CAN Driver Routines for the C166 family"*
    8          *                                                                   * 
    9          * Last modifications:  April 28nd 1997                              *
   10          * Version:             1.0                                          *
   11          * Authors:             Axel Wolf,  SCI Cupertino                    *
   12          *                      Dr. Jens Barrenscheen, HL MC PD, Munich      *
   13          *********************************************************************/
   14         /* ----------------------------------- include files: -------------- */
   15         /* ----------------------------------- externals, prototypes: ------ */
   16         extern unsigned int *id_ptr_16x[16];    /* pointer to message id's (UAReg) */
   17         extern unsigned char *db0_ptr_16x[16];  /* pointer to 'databyte 0's */  
   18         extern unsigned int *msgctrl_ptr_16x[16];       /* ptr to msg. contrl. regs */
   19         extern unsigned char *msgconf_ptr_16x[16];      /* ptr to msg. conf. regs */
   20         extern unsigned char dir_bit_16x[16];   /* DIR bits MO 1...15 */
   21         extern unsigned char xtd_bit_16x[16];   /* XTD bits MO 1...15 */
   22         extern unsigned char dlc_16x[16];       /* data byte lengths MO 1...15 */
   23         
   24         void def_mo_16x(unsigned char nr, unsigned char xtd, unsigned long id,
   25                 unsigned char dir, unsigned char dlc, unsigned char txie,
   26                 unsigned char rxie);
   27                 /* Define message object: MO-number, xtd, id, dir, dlc, TXIE, RXIE */
   28         /* ----------------------------------- PEC, Register: -------------- */
   29         /* ----------------------------------- global bit/byte/word data: -- */
   30         /* ----------------------------------- code ------------------------ */
   31         void def_mo_16x(unsigned char nr, unsigned char xtd, unsigned long id,
   32                 unsigned char dir, unsigned char dlc, unsigned char txie,
   33                 unsigned char rxie) 
   34                 /* Define message object: MO-number, xtd, id, dir, dlc, TXIE, RXIE */
   35         {
   36  1         /* -------------------------------- local  byte/word/bit data: -- */
   37  1              unsigned int dummy_int;
   38  1              unsigned int *dummy_idptr;
   39  1         /* -------------------------------- program: -------------------- */
   40  1              if ((nr<16) && (nr))
   41  1              {
   42  2                 dummy_idptr=id_ptr_16x[nr] + 1;      /* set dummy ptr to LAR */
   43  2      
   44  2                 if (xtd)     /* load Arbitration Registers with XTD ID: */
   45  2                 {
   46  3                      /* load Upper Arb. Reg.: */
   47  3                      id=id<<3;
   48  3                      dummy_int=(unsigned int) (id>>16);
   49  3                      *id_ptr_16x[nr]=(dummy_int<<8)+(dummy_int>>8); 
   50  3      
   51  3                      /* load Lower Arb. Reg. */
   52  3                      dummy_int=(unsigned int) id;
   53  3                      *dummy_idptr=(dummy_int<<8)+(dummy_int>>8);
   54  3                 }
C166 COMPILER V6.08, DEFMO16X                                                              12/11/2008 08:49:51 PAGE 2   

   55  2                 else         /* load Arbitration Registers with STD ID: */
   56  2                 {
   57  3                      /* load Upper Arb. Reg.: */
   58  3                      dummy_int=(unsigned int) id;
   59  3                      dummy_int=dummy_int<<5;
   60  3                      *id_ptr_16x[nr]=(dummy_int<<8)+(dummy_int>>8);
   61  3      
   62  3                      /* load Lower Arb. Reg.: */
   63  3                      *dummy_idptr=0x0800;
   64  3                 }
   65  2      
   66  2                 /* prepare Message Control Register: */
   67  2                 if (txie==1) (txie=0x20); else (txie=0x10);
   68  2                 if (rxie==1) (rxie=0x08); else (rxie=0x04);
   69  2                 if (dir==1) dummy_int = (0x5981 | txie | rxie); /* CPUUPD set */
   70  2                 else dummy_int = (0x5581 | txie | rxie);        /* MSGLST reset */
   71  2                 *msgctrl_ptr_16x[nr]=dummy_int;      /* load Mess. Contr. Reg. */
   72  2      
   73  2                 /* prepare Message Configuration Register: */
   74  2                 if (dlc>8) dlc=8;
   75  2                 dlc_16x[nr]=dlc;
   76  2                 dir_bit_16x[nr]=dir;
   77  2                 xtd_bit_16x[nr]=xtd;
   78  2                 *msgconf_ptr_16x[nr] = (dlc<<4) + (dir<<3) + (xtd<<2);
*** WARNING C192 IN LINE 78 OF ..\..\INCLUDES\LIBCAN\DEFMO16X.C: '=': value truncated
   79  2              }
   80  1      
   81  1      /* The function def_mo_16x defines a message object for the CAN 167 module
   82  1      with a standard or extended identifier.
   83  1      The function parameters are :
   84  1      - Parameter nr defines the number of the message object (1..15)
   85  1      - Parameter xtd defines if it is a 11-bit id (xtd=0) or 29-bit id (xtd=1)
   86  1      - Parameter id defines the 11/29-Bit identifier of the message object
   87  1      - Parameter dir (direction) defines if the message object is a receive object
   88  1        (dir=0) or a transmit object (dir=1)
   89  1      - Parameter dlc (data length code) defines the data length
   90  1        of the message object (0 data bytes ... 8 data bytes)
   91  1      - Parameter txie enables transmit interrupts of this MO
   92  1      - Parameter rxie enables receive interrupts of this MO
   93  1      
   94  1      Other Message control register loading ( t r a n s m i t  object):
   95  1      
   96  1               5                9               ?             ? 
   97  1          01       01       10      01      10    user   user     01
   98  1        RMTPND    TXRQ    CPUUPD  NEWDAT  MSGVAL  TXIE   RXIE   INTPND
   99  1         15 14    13 12    11 10    9 8    7 6     5 4    3 2    1 0
  100  1      
  101  1      Other Message control register loading ( r e c e i v e  object):
  102  1      
  103  1               5                5               ?             ? 
  104  1          01       01       01      01      10    user   user     01
  105  1        RMTPND    TXRQ    MSGLST  NEWDAT  MSGVAL  TXIE   RXIE   INTPND
  106  1         15 14    13 12    11 10    9 8    7 6     5 4    3 2    1 0
  107  1      */
  108  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         258     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
C166 COMPILER V6.08, DEFMO16X                                                              12/11/2008 08:49:51 PAGE 3   

  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
