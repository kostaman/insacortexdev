Signal void Baguette (void)
{
	unsigned char i;
	unsigned int PortB_tmp ;
	printf("Voila la baguette \n");
	while (1) {
			PortB_tmp = PORTB;
			printf("%02X =>%02X =>",(PortB_tmp>>8),~(PortB_tmp>>8)&0x00FF);
			for (i=8;i<16;i++)
			{
		 		if (PortB_tmp&(1<<i)) printf(" ");
		 		else printf("*");
			}
		 	printf("\n");  
		 
  			swatch(0.0008); // microseconde
	}
}


Signal void Valider(float impulse)
{
	PORTC &= ~(1<<13);
	swatch(impulse);
	PORTC |= (1<<13);

}

Signal void Raz(float impulse)
{
	PORTC |= (1<<13); // pour initialiser les boutons à l'état haut
 	PORTA |= (1<<0);

	PORTA &= ~(1<<0);
	swatch(impulse);
	PORTA |= (1<<0);

}
func void Init_Buttons(void)
{
		PORTC |= (1<<13); // pour initialiser les boutons à l'état haut
 		PORTA |= (1<<0);

}

func void SetLettre(char lettre)
{
	ADC1_IN1 = ((float) (lettre-'A')) * 3.3 / 25.0 + 1.0/26.0; 
}

Signal void Morsure (float laps, float impulse)
{


	PORTA &= ~(1<<0);
	swatch(0.2);
	PORTA |= (1<<0);

	swatch(laps);
	SetLettre('B');
	swatch(laps);
	PORTC &= ~(1<<13);
	swatch(impulse);
	PORTC |= (1<<13);

	swatch(laps);
	SetLettre('I');
	swatch(laps);
	PORTC &= ~(1<<13);
	swatch(impulse);
	PORTC |= (1<<13);

	swatch(laps);
	SetLettre('T');
	swatch(laps);
	PORTC &= ~(1<<13);
	swatch(impulse);
	PORTC |= (1<<13);

	swatch(laps);
	SetLettre('E');
	swatch(laps);
	PORTC &= ~(1<<13);
	swatch(impulse);
	PORTC |= (1<<13);

}
Signal void Accel (void)
{
	unsigned int i;
	float deltaP,deltaM,deltaP1,deltaM1,VMAX,VMIN,VMOY,VMOY1,PERIOD,TE,TIME_UP,TIME_DOWN ;
	VMAX = 3.16;
	VMIN = 0.720;
	VMOY = 1.68;
	TIME_UP=0.03;
	TIME_DOWN=0.06;
	PERIOD = 0.200;
	TE  = PERIOD/1000.0;
	deltaP  = (VMAX-VMOY)*TE/(PERIOD-TIME_UP-TIME_DOWN)*4.0 ;
	deltaM  = (VMOY-VMIN)*TE/(PERIOD-TIME_UP-TIME_DOWN)*4.0 ;

	deltaP1  = (2.92-2.16)/(TIME_UP/TE/2.0) ;
	VMOY1 = (2.92+2.16+1.48)/3.0	   ;
	deltaM1  = (VMOY1-1.48)/(PERIOD/4.0/TE) ;

	printf("ça secoue graave \n");
	printf("TE=%f deltaP=%f\n",TE,deltaP);
	ADC1_IN14 = VMOY;
	ADC1_IN15 = VMOY1;
	while (1) {
			while (ADC1_IN14 < VMAX)
			{
				ADC1_IN14=ADC1_IN14+deltaP;
				ADC1_IN15=ADC1_IN15+(VMAX-VMOY1)/(PERIOD/4.0-TIME_UP/2.0)*TE;
  				swatch(TE); // ms
			}
			for(i=0;i<(TIME_UP/TE/2);i++)
			{
				ADC1_IN15=ADC1_IN15-deltaP1;
				swatch(TE);
			}
			for(i=0;i<(TIME_UP/TE/2);i++)
			{
				ADC1_IN15=ADC1_IN15+deltaP1;
				swatch(TE);
			}
			while (ADC1_IN14 >VMOY)
			{
				ADC1_IN14=ADC1_IN14-deltaP;
				ADC1_IN15=ADC1_IN15-(VMAX-VMOY1)/(PERIOD/4.0-TIME_UP/2.0)*TE;
  				swatch(TE); // ms
			}
			while (ADC1_IN14 >VMIN )
			{
				ADC1_IN14=ADC1_IN14-deltaM;
				ADC1_IN15=ADC1_IN15-deltaM1;
  				swatch(TE); // ms
			}
			for(i=0;i<(TIME_DOWN/TE/2.0);i++)
			{
				ADC1_IN15=ADC1_IN15-deltaM1;
				swatch(TE);
			}
			for(i=0;i<(TIME_DOWN/TE/2.0);i++)
			{
				ADC1_IN15=ADC1_IN15+deltaM1;
				swatch(TE);
			}
			while (ADC1_IN14 < VMOY)
			{
				ADC1_IN14=ADC1_IN14+deltaM;
				ADC1_IN15=ADC1_IN15+deltaM1;
  				swatch(TE); // ms
			}

	}
}

Init_Buttons();
KILL button *
define button "Lance baguette","Baguette()"
define button "Lance secouée","Accel()"
define button  "Voir signaux","LA ADC1_IN14; LA (PORTB & 0xFF00); LA ADC1_IN1; LA (PORTA & 0x00000001);LA (PORTC & (1<<13))"
define button  "Valid","Valider(0.2)"
define button  "Raz","Raz(0.2)"
define button  "A","SetLettre('A')"
define button  "B","SetLettre('B')"
define button  "Z","SetLettre('Z')"
define button  "Q","SetLettre('Q')"
define button  "Morsure","Morsure(0.1,0.1)"