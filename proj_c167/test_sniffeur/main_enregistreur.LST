C166 COMPILER V6.08, MAIN_ENREGISTREUR                                                     12/11/2008 08:49:47 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE MAIN_ENREGISTREUR
OBJECT MODULE PLACED IN main_enregistreur.OBJ
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE main_enregistreur.c BROWSE INCDIR(..\..\libs_thierry\SourceC167\
                    -Developpement_Capcom_V2) MOD167 DEBUG

 stmt lvl     source

    1         //Hugues Malgouyres
    2         //16 10 2006
    3         //Prise en main du controleur de CAN
    4         
    5         //Définir ses clefs dans l'onglet C166 du projet
    6         //ID_VOITURE 0 1 ou 2
    7         //VERBEUX   // active les printf 
    8         //DEBUG     // Active les envois incrémentaux de vitesse et position (pas de périph)
    9         
   10         
   11         #include <c167cs.h>
   12         #include <intrins.h>
   13         #include <rtx166t.h>
   14         #include <../../includes/user_libs/struct_donnees_2007a.h> 
   15         #include <../../includes/user_libs/notre_lib_can_2007a.h> 
   16         #include <../../includes/libs/driveurs_2007b.h> 
   17         
   18         #define NUM_T_SNIFFER           1
   19         #define NUM_T_INIT                      0
   20         
   21         #define PERIODE_SNIFFER         2  //tours de tourniquet à 1ms
   22         
   23         
   24         Etat_Trottinette  Voiture[NB_VOITURES];
   25         Etat_Trottinette  Consigne;
   26         float I_Err_Pos[NB_VOITURES]; // pour Intégrale de l'Erreur de Position
   27         float Com_Courant;
   28         
   29         
   30         void Lecture_Donnes () 
   31         {
   32  1              unsigned char Id_Trot;
   33  1      
   34  1              //1 Lecture des données
   35  1      
   36  1              //2 - Lecture consigne
   37  1              Lire_Msg(IDMO_CONSIGNE, &Consigne);
   38  1      
   39  1              #ifdef VERBEUX
                      printf("___________\nCV = %f         CP=%d\n",Consigne.Vitesse,Consigne.Position);
                      #endif
   42  1      
   43  1              //2 - Lecture de l'état des autres voitures
   44  1              for (Id_Trot=0;Id_Trot<NB_VOITURES;Id_Trot++)
   45  1              {
   46  2              
   47  2                              Lire_Msg(IDMO_VOITURE+Id_Trot, &Voiture[Id_Trot]);
   48  2                              #ifdef VERBEUX
                                      printf("Trotinnette %d : V = %f m/s      P = %d pas\n",
                                         Id_Trot,Voiture[Id_Trot].Vitesse,Voiture[Id_Trot].Position);
                                      #endif
   52  2              
   53  2              }
   54  1      
C166 COMPILER V6.08, MAIN_ENREGISTREUR                                                     12/11/2008 08:49:47 PAGE 2   

   55  1      
   56  1      }
   57         
   58         
   59         void Tache_Sniffer(void) _task_ NUM_T_SNIFFER
   60         {
   61  1              unsigned char Le_Mode;
   62  1      
   63  1      
   64  1      
   65  1              while (1){
   66  2                      os_wait(K_IVL,PERIODE_SNIFFER,0);
   67  2      
   68  2                      Lire_Mode(&Le_Mode);
   69  2                      if (Le_Mode==POURSUITE_DE_TRAJECTOIRE)
   70  2                      {
   71  3                      
   72  3                      
   73  3                              //1 - Lecture de l'état du système global
   74  3                              Lecture_Donnes ();
   75  3      
   76  3                              //1 - Transmettre état local de la voiture
   77  3                      }
   78  2                      else  // On est à l'arret
   79  2                      {
   80  3      
   81  3                      }
   82  2              }
   83  1      }
   84         
   85          
   86         
   87         void tDemar (void) _task_ NUM_T_INIT
   88         {
   89  1      
   90  1              Configurer_Tout_Les_Periphs();
   91  1              Initialiser_Can();
   92  1              
   93  1              //1 - Interruption enabled
   94  1              IEN     =1;
   95  1      
   96  1              //1 - Initialisation etat trotinette
   97  1      
   98  1              os_create_task (NUM_T_SNIFFER);
   99  1      
  100  1      
  101  1              os_delete_task (NUM_T_INIT);
  102  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         110     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          40     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
C166 COMPILER V6.08, MAIN_ENREGISTREUR                                                     12/11/2008 08:49:47 PAGE 3   

  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
