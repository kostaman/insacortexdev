C166 COMPILER V6.06, EXX_16X1                                                              12/21/2007 15:13:04 PAGE 1   


C166 COMPILER V6.06, COMPILATION OF MODULE EXX_16X1
OBJECT MODULE PLACED IN .\exx_16x1.obj
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE ..\..\includes\libCAN\exx_16x1.c OPTIMIZE(0,SPEED) BROWSE MOD167 DEFINE(S
                    -TDIO=1,CONTROLLEUR) DEBUG PRINT(.\exx_16x1.lst) OBJECT(.\exx_16x1.obj) 

 stmt lvl     source

    1         /* ----------------------------------------- header: ----------------*/
    2         /*********************************************************************
    3          * Program name:        "CAN_EX_X.C"                                 *
    4          * Compiler used:       BSO/Tasking C166                             *
    5          * Task:                Example program for Siemens ApNote AP2922    *
    6          *                      "'C' CAN Driver Routines for the C166 family'*
    7          *                                                                   * 
    8          * Last modifications:  April 28nd 1997                              *
    9          * Authors:             Axel Wolf,  SCI Cupertino                    *
   10          *                      Dr. Jens Barrenscheen, HL MC PD, Munich      *
   11          *********************************************************************/
   12         /* ----------------------------------- include files: -------------- */
   13         #include <REG167.H>         /* register definitions C167             */
   14         
   15         #define MY_IEN_BIT      1       /* General Interrupt Enable = yes */
   16         #define MY_XP0IC_VALUE  0x00    /* Interrupts from CAN mod. (CPU side) = no */
   17         
   18         #define MY_BAUD_RATE    1000    /* 1000 kBit/s on the CAN bus */ 
   19         #define IE_BIT          0       /* Interrupts from CAN mod. (CAN side) = no */
   20         #define EIE_BIT         0       /* no error interrupts from the CAN module */ 
   21         #define SIE_BIT         0       /* no status interrupts from the CAN module */
   22         
   23         #define TEST_IDENTIFIER 0x15abcdef      /* Test ID used by example program */
   24         
   25         /* Specify Message Object (MO) Features (RF=Remote Frame, DF = Data Frame) */
   26         
   27         #define MO1_XTD_BIT     0               /* MO1 uses 11 bit ID */
   28         #define MO1_ID          0x001           /* 11-bit identifier of MO1 */
   29         #define MO1_DIR_BIT     1               /* MO1 transmits DF, receives RF */
   30         #define MO1_DLC         8               /* MO1 data length = 8 bytes */
   31         #define MO1_TXIE_BIT    0               /* MO1 gen. no transmit interrupts */
   32         #define MO1_RXIE_BIT    0               /* MO1 gen. no receive interrupts */
   33         
   34         #define MO2_XTD_BIT     0               /* MO2 uses 11 bit ID */
   35         #define MO2_ID          0x002           /* 11-bit identifier of MO2 */
   36         #define MO2_DIR_BIT     0               /* MO2 receives DF, transmits RF */
   37         #define MO2_DLC         0               /* MO2 data length = 0 bytes */
   38         #define MO2_TXIE_BIT    0               /* MO2 gen. no transmit interrupts */
   39         #define MO2_RXIE_BIT    0               /* MO2 gen. no receive interrupts */
   40         
   41         #define MO3_XTD_BIT     0               /* MO3 uses 11 bit ID */
   42         #define MO3_ID          0x003           /* 11-bit identifier of MO3 */
   43         #define MO3_DIR_BIT     1               /* MO3 transmits DF, receives RF */
   44         #define MO3_DLC         8               /* MO3 data length = 8 bytes */
   45         #define MO3_TXIE_BIT    0               /* MO3 gen. no transmit interrupts */
   46         #define MO3_RXIE_BIT    0               /* MO3 gen. no receive interrupts */
   47         
   48         #define MO15_XTD_BIT    1               /* MO15 uses 29 bit ID */
   49         #define MO15_ID         0x12345678      /* 29-bit identifier of MO15 (dummy) */
   50         #define MO15_DIR_BIT    0               /* MO15 receives DF (NO transmission)*/
   51         #define MO15_DLC        8               /* MO15 data length = 8 bytes (dummy)*/
   52         #define MO15_TXIE_BIT   0               /* MO15 gen. no transmit interrupts */
   53         #define MO15_RXIE_BIT   0               /* MO15 gen. no receive interrupts */
   54         
C166 COMPILER V6.06, EXX_16X1                                                              12/21/2007 15:13:04 PAGE 2   

   55         /* ----------------------------------- externals, prototypes: ------ */
   56         extern void init_can_16x(unsigned int baud_rate, unsigned char eie,
   57                 unsigned char sie, unsigned char ie);
   58                 /* Initialization of CAN-Module: (baud_rate, eie, sie, ie) */
   59         extern void def_mo_16x(unsigned char nr, unsigned char xtd, unsigned long id,
   60                 unsigned char dir, unsigned char dlc, unsigned char txie,
   61                 unsigned char rxie);
   62                 /* Define message object: MO-number, xtd, id, dir, dlc, TXIE, RXIE */
   63         extern void ld_modata_16x(unsigned char nr, unsigned char *upl_data_ptr);
   64                 /* load data bytes of a message object (1..14) */
   65         extern void rd_modata_16x(unsigned char nr, unsigned char *downl_data_ptr);
   66                 /* read data bytes from message object 'nr' (1..14) */
   67         extern void rd_mo15_16x(unsigned char *mo15_db_ptr,
   68                 unsigned long *mo15_id_ptr, unsigned char *mo15_dlc_ptr);
   69                 /* read dlc, identifier and data from MO 15 of C167 (Basic CAN) */
   70         extern void send_mo_16x(unsigned char nr);
   71                 /* Transmit message object 'nr' (1..14) */
   72         extern unsigned char check_mo_16x(unsigned char nr);
   73                 /* check for new data in MO 'nr' (1..14) and if so, return 1 */
   74         extern unsigned char check_mo15_16x(void);
   75                 /* check for new data or remote frame in MO 15 and if so, return 1 */
   76         extern unsigned char check_busoff_16x(void);
   77                 /* check for bus off situation and recover if necessary */
   78         
   79         void delay(unsigned char value);
   80                 /* creates variable delays with Timer T4 (1 ms < x < 26 ms) */
   81         
   82         void main (void);
   83         /* ----------------------------------- PEC, Register: -------------- */
   84         /* ----------------------------------- global bit/byte/word data: -- */
   85         /* ----------------------------------- code: main program: --------- */
   86         void main ()
   87         {
   88  1         /* -------------------------------- local  byte/word/bit data: -- */
   89  1         unsigned char i;
   90  1      
   91  1         unsigned char download_data_buf[8]={0, 1, 2, 3, 4, 5, 6, 7};
   92  1         unsigned char upload_data_buf[8]={0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77};
   93  1         unsigned char mo15_db_buf1[8];       /* storage for MO15 buffer 1 data */
   94  1         unsigned char mo15_db_buf2[8];       /* storage for MO15 buffer 2 data */
   95  1         unsigned long mo15_id1;              /* storage for MO15 buffer 1 id */ 
   96  1         unsigned long mo15_id2;              /* storage for MO15 buffer 2 id */
   97  1         unsigned char mo15_dlc1;             /* storage for MO15 buffer 1 dlc */
   98  1         unsigned char mo15_dlc2;             /* storage for MO15 buffer 2 dlc */
   99  1         /* -------------------------------- program: -------------------- */
  100  1      
  101  1         /* initialize ports:                                              */
  102  1         port_reg_init();
*** WARNING C140 IN LINE 102 OF ..\..\INCLUDES\LIBCAN\EXX_16X1.C: 'port_reg_init' undefined; assuming 'extern int port_r
             -eg_init()'
  103  1              /* Initialization of ports, registers etc.*/
  104  1      
  105  1         init_can_16x(MY_BAUD_RATE, EIE_BIT, SIE_BIT, IE_BIT);
  106  1              /* Initialization of CAN-Module: (baud_rate, eie, sie, ie) */
  107  1      
  108  1         def_mo_16x(1,        MO1_XTD_BIT,    MO1_ID,         MO1_DIR_BIT,
  109  1                              MO1_DLC,        MO1_TXIE_BIT,   MO1_RXIE_BIT);
  110  1              /* Define message object 1 for data frame transmission: */
  111  1              /* MO=1, xtd=no , id=001, dir=transmit, dlc=8, TXIE=no, RXIE=no */
  112  1              /* When sent, MO 1 gen. data frames; it receives remote frames */
  113  1              /* Remote frames will be automatically answered with a data frame */
  114  1      
C166 COMPILER V6.06, EXX_16X1                                                              12/21/2007 15:13:04 PAGE 3   

  115  1         def_mo_16x(2,        MO2_XTD_BIT,    MO2_ID,         MO2_DIR_BIT,
  116  1                              MO2_DLC,        MO2_TXIE_BIT,   MO2_RXIE_BIT);
  117  1              /* Define message object 2 for data frame reception: */
  118  1              /* MO=2, xtd=no, id=002, dir=receive, dlc=0, TXIE=no, RXIE=no */
  119  1              /* When sent, MO 2 gen. remote frames; it receives data frames */
  120  1      
  121  1         def_mo_16x(3,        MO3_XTD_BIT,    MO3_ID,         MO3_DIR_BIT,
  122  1                              MO3_DLC,        MO3_TXIE_BIT,   MO3_RXIE_BIT);
  123  1              /* Define message object 3 for data frame transmission: */
  124  1              /* MO=3, xtd=no, id=003, dir=transmit, dlc=8, TXIE=no, RXIE=no */
  125  1              /* When sent, MO 3 gen. data frames; it receives remote frames */
  126  1              /* Remote frames will be automatically answered with a data frame */
  127  1      
  128  1         def_mo_16x(15,       MO15_XTD_BIT,   MO15_ID,        MO15_DIR_BIT,
  129  1                              MO15_DLC,       MO15_TXIE_BIT,  MO15_RXIE_BIT);
  130  1              /* Define message object 15 for data frame reception: */
  131  1              /* MO=15, xtd=no, id=xxx, dir=receive, dlc=xxx, TXIE=no, RXIE=no */
  132  1              /* MO 15 cannot be sent; it now receives data frames */
  133  1      
  134  1         XP0IC=MY_XP0IC_VALUE;        /* load CAN-Module Interrupt Register */
  135  1      
  136  1         /* IEN bit in PSW:                                                */
  137  1         IEN = MY_IEN_BIT;                    /* global interrupt enable   */
  138  1         /*----------------------------------------------------------------*/
  139  1         while (1)
  140  1         {
  141  2         delay (10);                                  /* 10 ms delay */
  142  2         /* section 1 */
  143  2      
  144  2              /* Transmit message 1 (sends data frame): */
  145  2              ld_modata_16x(1, upload_data_buf);      /* load data bytes MO 1 */
  146  2              send_mo_16x(1);                         /* transmit MO 1 */
  147  2      
  148  2              /* increase data bytes: */
  149  2              for (i=0;i<8;i++) upload_data_buf[i]++;
  150  2      
  151  2         delay (10);                                  /* 10 ms delay */
  152  2         /* section 2 */
  153  2      
  154  2              /* Check message 2 for incoming data frame: */
  155  2              if (check_mo_16x(2))
  156  2              {
  157  3                 rd_modata_16x(2, download_data_buf);
  158  3              /* load data bytes of MO 3 with data just read from MO 2: */
  159  3                 ld_modata_16x(3, download_data_buf);
  160  3              /* Transmit message 3 (sends data frame): */
  161  3                 send_mo_16x(3);
  162  3              }
  163  2      
  164  2         delay (10);                                  /* 10 ms delay */
  165  2         /* section 3 */
  166  2      
  167  2              /* Check message object 15 for incoming data frame: */
  168  2              if (check_mo15_16x())
  169  2              {
  170  3                 /* read out id, dlc & data bytes from MO 15 */
  171  3                 rd_mo15_16x(mo15_db_buf1, &mo15_id1, &mo15_dlc1);
  172  3      
  173  3                 if(mo15_id1==TEST_IDENTIFIER)
  174  3                 {
  175  4                      def_mo_16x(14, 1, mo15_id1, 1, mo15_dlc1, 0, 0);
  176  4                      /* Define message object 14 for data frame transmission: */
C166 COMPILER V6.06, EXX_16X1                                                              12/21/2007 15:13:04 PAGE 4   

  177  4                      /* MO=14,xtd=no,id=MO15,dir=tr,dlc=MO15,TXIE=no,RXIE=no */
  178  4      
  179  4                      /* load data bytes of MO 14 with data just read from MO 15: */
  180  4                      ld_modata_16x(14, mo15_db_buf1);
  181  4      
  182  4                      /* Transmit message 14 (sends data frame): */
  183  4                      send_mo_16x(14);
  184  4                 }
  185  3              }
  186  2      
  187  2         delay (10);                                  /* 10 ms delay */
  188  2         /* section 4 */
  189  2      
  190  2              /* check for bus off situation and recover (reset INIT bit) */
  191  2              if (check_busoff_16x()) /* if Bus Off has occurred */
  192  2              {
  193  3                 /* user specific reaction */
  194  3              }
  195  2         }
  196  1         /* -------------------------------- end: ------------------------ */
  197  1      }
*** WARNING C47 IN LINE 94 OF ..\..\INCLUDES\LIBCAN\EXX_16X1.C: 'mo15_db_buf2': unreferenced local variable
*** WARNING C47 IN LINE 96 OF ..\..\INCLUDES\LIBCAN\EXX_16X1.C: 'mo15_id2': unreferenced local variable
*** WARNING C47 IN LINE 98 OF ..\..\INCLUDES\LIBCAN\EXX_16X1.C: 'mo15_dlc2': unreferenced local variable
  198         
  199         void delay(unsigned char value)
  200         {
  201  1              if (value<1) value=1;
  202  1              if (value>26) value=26;         
  203  1              T4=value*2500;                  /* load Timer T4 according to value */
  204  1              T4CON=0x0080;                   /* T4: downwards, resol.= 400ns */
  205  1              T4IC=0;                         /* no IR Timer 4 */
  206  1              T4R = 1;                        /* start Timer T4 */
  207  1              while(T4IR==0);                 /* wait for timer underflow */
  208  1              T4IR=T4R=0;                     /* reset interrupt request flag */
  209  1                                              /* stop Timer T4 */
  210  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         514     --------
  NEAR-CONST SIZE  =          16     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
