C166 COMPILER V6.08, RDMOD16X                                                              12/11/2008 08:49:52 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE RDMOD16X
OBJECT MODULE PLACED IN .\rdmod16x.obj
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE ..\..\includes\libCAN\rdmod16x.c BROWSE INCDIR(..\..\libs_thierr
                    -y\SourceC167\Developpement_Capcom_V2) MOD167 DEBUG PRINT(.\rdmod16x.lst) OBJECT(.\rdmod16x.obj) 

 stmt lvl     source

    1         /* ----------------------------------------- header: ----------------*/
    2         /*********************************************************************
    3          * Program name:        "RDMOD16X.C"                                 *
    4          * Compiler used:       BSO/Tasking C166                             *
    5          * Task:                Source File for procedure rd_modata_16x      *
    6          *                      belonging to Siemens ApNote AP2922           *
    7          *                      "'C' CAN Driver Routines for the C166 family"*
    8          *                                                                   * 
    9          * Last modifications:  April 28nd 1997                              *
   10          * Version:             1.0                                          *
   11          * Authors:             Axel Wolf,  SCI Cupertino                    *
   12          *                      Dr. Jens Barrenscheen, HL MC PD, Munich      *
   13          *********************************************************************/
   14         /* ----------------------------------- include files: -------------- */
   15         /* ----------------------------------- externals, prototypes: ------ */
   16         extern unsigned int *id_ptr_16x[16];    /* pointer to message id's (UAReg) */
   17         extern unsigned char *db0_ptr_16x[16];  /* pointer to 'databyte 0's */  
   18         extern unsigned int *msgctrl_ptr_16x[16];       /* ptr to msg. contrl. regs */
   19         extern unsigned char *msgconf_ptr_16x[16];      /* ptr to msg. conf. regs */
   20         extern unsigned char dir_bit_16x[16];   /* DIR bits MO 1...15 */
   21         extern unsigned char xtd_bit_16x[16];   /* XTD bits MO 1...15 */
   22         extern unsigned char dlc_16x[16];       /* data byte lengths MO 1...15 */
   23         
   24         void rd_modata_16x(unsigned char nr, unsigned char *downl_data_ptr);
   25                 /* read data bytes from message object 'nr' (1..14) */
   26         
   27         /* ----------------------------------- PEC, Register: -------------- */
   28         /* ----------------------------------- global bit/byte/word data: -- */
   29         /* ----------------------------------- code ------------------------ */
   30         void rd_modata_16x(unsigned char nr, unsigned char *downl_data_ptr)
   31                 /* read data bytes from message object 'nr' (1..14) */
   32         {
   33  1         /* -------------------------------- local  byte/word/bit data: -- */
   34  1              unsigned char i, dummy_char;
   35  1              unsigned char *dummy_dbptr;
   36  1         /* -------------------------------- program: -------------------- */
   37  1              if ((nr<15) && (nr))
   38  1              {
   39  2                 do
   40  2                 {
   41  3                      dummy_char=*msgconf_ptr_16x[nr];
   42  3                      dlc_16x[nr]=(dummy_char>>4);
   43  3                                      /* store actual data length code */
   44  3                      *msgctrl_ptr_16x[nr]=0xfdfd;
   45  3                                      /* clr NEWDAT and INTPND */
   46  3                      dummy_dbptr=db0_ptr_16x[nr];
   47  3                                      /* load dummy ptr (db 0) */
   48  3                      for (i=0;i<dlc_16x[nr];i++) *downl_data_ptr++ = *dummy_dbptr++;
   49  3                      /* move data bytes from MO's data bytes to download buffer */
   50  3                 } while (*msgctrl_ptr_16x[nr] & 0x0200);     /* while NEWDAT=1 */
   51  2              }
   52  1      
   53  1      /* The reading of the data bytes is repeated if a new message comes in
   54  1      for message 'nr' during the data bytes are read, because the CAN module
C166 COMPILER V6.08, RDMOD16X                                                              12/11/2008 08:49:52 PAGE 2   

   55  1      sets NEWDAT in this case. */
   56  1         /* -------------------------------- end: ------------------------ */
   57  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         102     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
