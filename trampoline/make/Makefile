#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by the French intellectual property law.
#
# This software is distributed under the Lesser GNU Public Licence
#
# Warning: This Makefile SHOULD not be called directly.
#          It is automatically called from the Makefile
#          generated by goil.

#############################################################################
# Build paths
#############################################################################
OBJ_DIR = $(BUILD_DIR)/obj
DEP_DIR = $(BUILD_DIR)/dep
EXTRA_FILES_MRPROPER += $(BUILD_DIR)/

#############################################################################
# Trampoline Path definition
#############################################################################
OS_PATH = $(TPL_BASE_PATH)/os
COM_PATH = $(TPL_BASE_PATH)/com
AUTOSAR_PATH = $(TPL_BASE_PATH)/autosar
DEBUG_PATH = $(TPL_BASE_PATH)/debug
MACHINE_PATH = $(TPL_BASE_PATH)/machines

ifdef ARCH
ARCH_PATH = $(MACHINE_PATH)/$(ARCH)
ifdef CHIP
CHIP_PATH = $(ARCH_PATH)/$(CHIP)
ifdef BOARD
BOARD_PATH = $(CHIP_PATH)/$(BOARD)
endif
endif
endif

#############################################################################
# Add Trampoline source files.
#############################################################################
include $(DEBUG_PATH)/Makefile
include $(OS_PATH)/Makefile
ifeq ($(strip $(AUTOSAR)),true)
  include $(AUTOSAR_PATH)/Makefile
endif
include $(COM_PATH)/Makefile

ifdef ARCH_PATH
-include $(ARCH_PATH)/Makefile
CPPFLAGS += -I$(ARCH_PATH)
TEMP_SOURCE_DIRS += $(ARCH_PATH)
endif

ifdef CHIP_PATH
-include $(CHIP_PATH)/Makefile
CPPFLAGS += -I$(CHIP_PATH)
TEMP_SOURCE_DIRS += $(CHIP_PATH)
endif

ifdef BOARD_PATH
-include $(BOARD_PATH)/Makefile
CPPFLAGS += -I$(BOARD_PATH)
TEMP_SOURCE_DIRS += $(BOARD_PATH)
endif



#add trampoline paths in the include path. 
CPPFLAGS += -I$(OIL_OUTPUT_PATH) 
CPPFLAGS += -I$(OS_PATH) -I$(COM_PATH) -I$(DEBUG_PATH)

#############################################################################
# Autosar specific Configuration
#############################################################################
ifeq ($(strip $(AUTOSAR)),true)
  AUTOSAR_GOIL_FLAG = --autosar
  AUTOSAR_DEP = AUTOSAR
  CPPFLAGS += -I$(AUTOSAR_PATH)
  AUTOSAR_MAKE_FLAG = AUTOSAR=true
else
  AUTOSAR_GOIL_FLAG =
  AUTOSAR_DEP =
  AUTOSAR_MAKE_FLAG =
endif

#############################################################################
# Goil related variables.
#############################################################################
OIL_OUTPUT_PATH = $(basename $(OIL_FILE))
OIL_GENERATED_C_FILE = tpl_os_generated_configuration.c
SOURCES += $(OIL_GENERATED_C_FILE)
ifdef GOIL_TEMPLATE_PATH 
	GOIL_TEMPLATE_STR = --templates=$(GOIL_TEMPLATE_PATH)
else #use the default template directory.
	GOIL_TEMPLATE_STR =
endif

#############################################################################
# In the end, CFLAGS includes all CPPFLAGS (because it is used 
# in this way in compiler_rules.mk
#############################################################################

CFLAGS += $(CPPFLAGS)


#############################################################################
# objects and dependancy files.
#############################################################################
OBJ      :=  $(SOURCES:%=$(OBJ_DIR)/%.o)
DEPFILES :=  $(SOURCES:%=$(DEP_DIR)/%.d)

#############################################################################
# End of configuration: 
# Build rules.
#############################################################################

# build all, using dependancies: the '|' means that goil SHOULD
# be generated before all, because the dependancy files require
# that all source files are present.
.PHONY: ALL 
ALL: | $(OIL_OUTPUT_PATH)/$(OIL_GENERATED_C_FILE) $(EXEC)

# generate compilation and dependancy rules for these
# paths, by including recursively the compiler_rules
# makefile.
TEMP_SOURCE_DIRS += $(OS_PATH) $(COM_PATH) $(AUTOSAR_PATH) 
TEMP_SOURCE_DIRS += $(DEBUG_PATH) $(OIL_OUTPUT_PATH) .
include $(OS_MAKE_PATH)/compiler_rules.mk

# the following fixes old Make-rules which does not 
# define specific LD variable (linking was previously
# made with CC command)
ifndef LD
LD = $(CC)
endif

# the following fixes old Make-rules which does not
# define specific CPP command variable
ifndef CPP
CPP = $(CC) -E
endif

# exe rule -> Link
$(EXEC): $(OBJ)
	$(LD) -o $(EXEC) $(OBJ) $(LDFLAGS) 

#clean
.PHONY: clean 
clean:
	@rm -rf $(OBJ) *~  $(EXTRA_FILES_CLEAN)
	@rm -rf $(EXEC) $(DEPFILES) $(BUILD_DIR) $(OIL_OUTPUT_PATH)


# generate C file from OIL file, using goil.
$(OIL_OUTPUT_PATH)/$(OIL_GENERATED_C_FILE): $(OIL_FILE) $(OIL_FILE_DEP) Makefile
	$(GOIL_COMPILER) --generate-makefile --target=$(TARGET) $(GOIL_TEMPLATE_STR) $(GENITVEC) $(AUTOSAR_GOIL_FLAG) $(OIL_FILE)

#documentation
doc: doc-dev doc-user

doc-dev:
	$(DOXYGEN) $(TPL_BASE_PATH)/Doxyfile-dev

doc-user:
	$(DOXYGEN) $(TPL_BASE_PATH)/Doxyfile-user

# dependancy directory.
$(DEP_DIR):
	@if [ ! -d $(DEP_DIR) ]; then mkdir -p $(DEP_DIR); fi;

#TODO: This include implies that dependancies are created...
#      even if the 'clean' target is called!
ifndef NODEP
    -include $(DEPFILES)
endif
