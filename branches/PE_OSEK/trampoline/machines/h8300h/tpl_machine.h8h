  .h8300h
  .section .text
  
  .global _tpl_get_task_lock
  
_tpl_get_task_lock:
;  andc #0x80, ccr
  rts
    
  .global _tpl_release_task_lock
  
_tpl_release_task_lock:
;  orc #0x7F, ccr
  rts


/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                  Gestion des contextes                                  */
/*                                                                         */
/*-------------------------------------------------------------------------*/

        .h8300h

 .macro macroSauvegarderRegistres
    push er4
    push er5
    push er6
 .endm

 .macro macroRestituerRegistres
    pop er6
    pop er5
    pop er4
 .endm

print:
  push er6
  push er5
  push er4
  push er3
  push er2
  push er1
  push er0
  jsr _printHex8
  pop er0
  pop er1
  pop er2
  pop er3
  pop er4
  pop er5
  pop er6
  rts
  
;-------------------------------------------------------------------------*
;                                                                         *
;              Création d'un nouveau contexte                             *
;           (appelé lors d'une création de tache)                         *
;                                                                         *
;-------------------------------------------------------------------------*

;void createContext (u32 * sp, const u32 entryPoint) ;
; ER0 contains stack address save location
; ER1 contains entryPoint
 .global _createContext

_createContext:
;--- sauvegarder les registres de l'appelant
      	macroSauvegarderRegistres
;--- Sauvegarder le pointeur de pile courant
        mov.l    er7, er6
;--- Etablir la pile de la nouvelle tache
        mov.l    @er0, er7
;--- Mettre l'adresse de la routine a executer dans ER5
        mov.l    er1, er5
;--- Adresse d'execution de la nouvelle tache
        mov.l    #tache, er1
        push     er1
;--- Sauvegarder les registres de la nouvelle tache
        macroSauvegarderRegistres
;--- Enregistrer la nouvelle valeur de la pile
        mov.l    er7, @er0
	mov.l   sp, er0
    jsr print
;--- Restituer la pile de la tache courante
        mov.l    er6, er7
;--- Restituer les registres de l'appelant
		macroRestituerRegistres
;--- Retour
        rts

/*-------------------------------------------------------------------------*/

tache:
; //--- Valider les interruptions
        andc     #0x7F, ccr
; //--- Aller exécuter le code de la tâche
        jsr      @er5
; //--- Effectuer le code de terminaison
        jmp      _TerminateTask

/*-------------------------------------------------------------------------*/



;-------------------------------------------------------------------------*
;                                                                         *
;              Commutation du contexte entre deux taches                  *
;                                                                         *
;-------------------------------------------------------------------------*

;void h8300h_switch_context(u32 * *old_sp,
;                           u32 * *new_sp)

 ; ER0 contains old_sp (may be NULL)
 ; ER1 contains new_sp

   .global _h8300h_switch_context

_h8300h_switch_context:
;----------------- SAUVEGARDE DU CONTEXTE DE LA TACHE EN COURS ---------------------
;    jsr _printHex8
    mov.l   er0, er0
    beq		no_context_save
;--- Commencer par sauver les registres
    macroSauvegarderRegistres
;--- ... et sauvegarder son pointeur de pile
	mov.l	sp, @er0
no_context_save:
;------------ RESTITUTION DU CONTEXTE DE LA NOUVELLE TACHE EN COURS ----------------
;--- Restituer son pointeur de pile
	mov.l	@er1, sp
	mov.l   sp, er0
    jsr _printHex8
;--- Restituer les registres
    macroRestituerRegistres
;--- Et retour
    rts

/*-------------------------------------------------------------------------*/
  
 .end
   