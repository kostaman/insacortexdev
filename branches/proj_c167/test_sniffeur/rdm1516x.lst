C166 COMPILER V6.08, RDM1516X                                                              12/11/2008 08:49:52 PAGE 1   


C166 COMPILER V6.08, COMPILATION OF MODULE RDM1516X
OBJECT MODULE PLACED IN .\rdm1516x.obj
COMPILER INVOKED BY: C:\Keil\Evalsoft\C166\BIN\C166.EXE ..\..\includes\libCAN\rdm1516x.c BROWSE INCDIR(..\..\libs_thierr
                    -y\SourceC167\Developpement_Capcom_V2) MOD167 DEBUG PRINT(.\rdm1516x.lst) OBJECT(.\rdm1516x.obj) 

 stmt lvl     source

    1         /* ----------------------------------------- header: ----------------*/
    2         /*********************************************************************
    3          * Program name:        "RDM1516X.C"                                 *
    4          * Compiler used:       BSO/Tasking C166                             *
    5          * Task:                Source File for procedure rd_mo15_16x        *
    6          *                      belonging to Siemens ApNote AP2922           *
    7          *                      "'C' CAN Driver Routines for the C166 family"*
    8          *                                                                   * 
    9          * Last modifications:  April 28nd 1997                              *
   10          * Version:             1.0                                          *
   11          * Authors:             Axel Wolf,  SCI Cupertino                    *
   12          *                      Dr. Jens Barrenscheen, HL MC PD, Munich      *
   13          *********************************************************************/
   14         /* ----------------------------------- include files: -------------- */
   15         #include <REG167.H>         /* register definitions C167             */
   16         #include "CANR_16X.H"       /* CAN control register definitions      */
   17         
   18         /* ----------------------------------- externals, prototypes: ------ */
   19         extern unsigned int *id_ptr_16x[16];    /* pointer to message id's (UAReg) */
   20         extern unsigned char *db0_ptr_16x[16];  /* pointer to 'databyte 0's */  
   21         extern unsigned int *msgctrl_ptr_16x[16];       /* ptr to msg. contrl. regs */
   22         extern unsigned char *msgconf_ptr_16x[16];      /* ptr to msg. conf. regs */
   23         extern unsigned char dir_bit_16x[16];   /* DIR bits MO 1...15 */
   24         extern unsigned char xtd_bit_16x[16];   /* XTD bits MO 1...15 */
   25         extern unsigned char dlc_16x[16];       /* data byte lengths MO 1...15 */
   26         
   27         void rd_mo15_16x(unsigned char *mo15_db_ptr,
   28                 unsigned long *mo15_id_ptr, unsigned char *mo15_dlc_ptr);
   29                 /* read dlc, identifier and data from MO 15 of C167 (Basic CAN) */
   30         
   31         /* ----------------------------------- PEC, Register: -------------- */
   32         /* ----------------------------------- global bit/byte/word data: -- */
   33         /* ----------------------------------- code ------------------------ */
   34         void rd_mo15_16x(unsigned char *mo15_db_ptr,
   35                 unsigned long *mo15_id_ptr, unsigned char *mo15_dlc_ptr)
   36                 /* read dlc, identifier and data from MO 15 of C167 (Basic CAN) */
   37         {
   38  1         /* -------------------------------- local  byte/word/bit data: -- */
   39  1              unsigned char i;
   40  1              unsigned int dummy_int1, dummy_int2;
   41  1              unsigned char *dummy_dbptr;
   42  1              unsigned int *dummy_idptr;
   43  1         /* -------------------------------- program: -------------------- */
   44  1              /* read actual data length code from momentarily accessed buffer: */
   45  1              *mo15_dlc_ptr=dlc_16x[15]=(*msgconf_ptr_16x[15]>>4);
   46  1      
   47  1              /* read actual identifier from momentarily accessed buffer       */
   48  1              /* and convert it into hexadecimal:                              */
   49  1              dummy_idptr=id_ptr_16x[15];
   50  1              if (xtd_bit_16x[15])            /* calculate XTD ID: */
   51  1              {
   52  2                 dummy_int1=*dummy_idptr++;
   53  2                 dummy_int2=*dummy_idptr;
   54  2                 dummy_int1=(dummy_int1<<8)+(dummy_int1>>8);
C166 COMPILER V6.08, RDM1516X                                                              12/11/2008 08:49:52 PAGE 2   

   55  2                 dummy_int2=(dummy_int2<<8)+(dummy_int2>>8);
   56  2                 *mo15_id_ptr=((((unsigned long)(dummy_int1))<<16) + dummy_int2)>>3;
   57  2              }
   58  1              else                            /* calculate STD ID: */
   59  1              {
   60  2                 dummy_int1=*dummy_idptr;
   61  2                 *mo15_id_ptr=(unsigned long) (((dummy_int1<<8)+(dummy_int1>>8))>>5);
   62  2              }
   63  1      
   64  1              /* get actual data bytes from momentarily accessed buffer: */
   65  1              dummy_dbptr=db0_ptr_16x[15];
   66  1              for (i=0;i<dlc_16x[15];i++) *mo15_db_ptr++ = *dummy_dbptr++;
   67  1      
   68  1              /* clr NEWDAT,INTPND & RMTPND to release mom. acc. buffer: */
   69  1              *msgctrl_ptr_16x[15]=0xedfd;
   70  1         /* -------------------------------- end ------------------------- */
   71  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         152     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
