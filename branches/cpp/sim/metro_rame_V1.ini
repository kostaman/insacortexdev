/* Analog0(float Maxi)
* Simule la dynamique d'une Rame de métro :
*  entrée du modèle : 
*    Vin : valeur du delta en volts à l'entrée de la carte courant provoquée
*         par le signal PWM du PortA.1 (direct)  ou 2 (reverse)
*  sortie du modèle	:
*    OptoA,OptoB : les signaux des opto-coupleurs vues sur 
*  variables locales :
*    vitesse : vitesse linéaire de la trottinette
*    angle : l'angle en metre ;-) de la roue
*/

/* Modèle continu
    V(m/s)		    K		
  __________  = __________ 
  
  Vin(volts)	 1 + Tau.p	

 Mais Tau est très grand !!! (pas de frottement) donc on prend un simple modèle	intégrateur

 Vtachy(volt)	  1		   V(m/s)			   1		  1
  __________  =  ___  =>  ____________  = ___________ = _____
  
  Vin(volts)	 Tm.p	   Vin(volts)	   Ktach.Tm.p	Tau.p


*/ 


/* Modèle discret de la rame  pour un premier oprdre
                                  -1
      K		bilinéaire		1  + z					   K				 1 - 2.Tau/Te
  __________ =====> K0 . _____________  avec K0 = _____________  et b1 = ______________ 
                                     -1
  1 + Tau. p			   1  + b1. z			   1 + 2.Tau/Te		  1 + 2.Tau/Te

d'où 
y[k] = -b1.y[k-1] + K0.(e[k]+e[k-1])

Pour un modèle intégrateur méthode d'Euler
y[k] = y[k-1] + Te / Tau * e[k] 


*/
Signal void Ma_Rame (void)
{ 
		float Te,K,Tau,K0,b1,VitMax,vitesse,angle,Vin,VinVioke;
		unsigned char int_angle;
		unsigned long int i;
		signed int OptoA,OptoB;

		VitMax = 2200.0; // pas/s	
		K = 0.52;
		Tau= 0.31;
		
		Te = 1.0/VitMax/2.0;
		printf("Te=%f\n",Te);
		
		K0 = K/(1.0+2.0*Tau/Te);
		b1 = (1.0-2.0*Tau/Te)/(1.0+2.0*Tau/Te);

		vitesse = 0.0;
		VinVioke=0.0;
		angle=0.0;
		OptoA=0;
		OptoB=0;

		while (1) {

			//1 boucle rapide des optos
				swatch(Te);
				
			   //1 Calcul de l'angle et génération des optos
				angle  =  angle + vitesse * Te;
	 			int_angle = (signed char)(angle);
		    	if ((int_angle & 2)>1) PORTA = PORTA | (1<<6);	 
				else PORTA = PORTA & ~(1<<6);
				int_angle--;
				if ((int_angle & 2)>1) PORTA = PORTA | (1<<7);
				else PORTA = PORTA & ~(1<<7);
	
			if (TIM2_CCER & (1<<4))
				// CC2_ON (recule)
				Vin = -((float) TIM2_CCR2);
			else if (TIM2_CCER & (1<<8))
				//CC3_ON  (avance)
				Vin = ((float) TIM2_CCR3);
			else
				Vin = 0.0;
		
			//1 Calcul de la récurrence de vitesse
			//Pour un premier ordre
			vitesse = -b1 * vitesse + K0 * (Vin+VinVioke) ;
			
			//1 saturation de la vitesse
			if (vitesse>VitMax) vitesse=VitMax;
			if (vitesse<-VitMax) vitesse=-VitMax;
			
			VinVioke = Vin;
		
		}
}
KILL button *
define button "Lance Rame","Ma_Rame()"
define button "VcomI","LA PORT7 & 2" 
define button "Vtachy","LA AIN5" 
define button "VOptos","LA PORT3 & (1<<4);LA PORT3 & (1<<6)"
