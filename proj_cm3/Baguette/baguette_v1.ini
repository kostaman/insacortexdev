Signal void Baguette (void)
{
	unsigned char i;
	unsigned int PortB_tmp ;
	printf("Voila la baguette \n");
	while (1) {
			PortB_tmp = PORTB;
			for (i=8;i<16;i++)
			{
		 		if (PortB_tmp&(1<<i)) printf(" ");
		 		else printf("*");
			}
		 	printf("\n");  
		 
  			swatch(0.001); // microseconde
	}
}

Signal void Baguette_Inversee (void)
{
	unsigned char i;
	unsigned int PortB_tmp ;
	printf("Voila la baguette \n");
	while (1) {
			PortB_tmp = PORTB;
			for (i=8;i<16;i++)
			{
		 		if (PortB_tmp&(1<<i)) printf("*");
		 		else printf(" ");
			}
		 	printf("\n");  
		 
  			swatch(0.001); // microseconde
	}
}

Signal void Accel (void)
{
	unsigned int i;
	float deltaP,deltaM,deltaP1,deltaM1,VMAX,VMIN,VMOY,VMOY1,PERIOD,TE,TIME_UP,TIME_DOWN ;
	VMAX = 3.16;
	VMIN = 0.720;
	VMOY = 1.68;
	TIME_UP=0.03;
	TIME_DOWN=0.06;
	PERIOD = 0.200;
	TE  = PERIOD/1000.0;
	deltaP  = (VMAX-VMOY)*TE/(PERIOD-TIME_UP-TIME_DOWN)*4.0 ;
	deltaM  = (VMOY-VMIN)*TE/(PERIOD-TIME_UP-TIME_DOWN)*4.0 ;

	deltaP1  = (2.92-2.16)/(TIME_UP/TE/2.0) ;
	VMOY1 = (2.92+2.16+1.48)/3.0	   ;
	deltaM1  = (VMOY1-1.48)/(PERIOD/4.0/TE) ;

	printf("ça secoue graave \n");
	printf("TE=%f deltaP=%f\n",TE,deltaP);
	ADC1_IN0 = VMOY;
	ADC1_IN1 = VMOY1;
	while (1) {
			while (ADC1_IN0 < VMAX)
			{
				ADC1_IN0=ADC1_IN0+deltaP;
				ADC1_IN1=ADC1_IN1+(VMAX-VMOY1)/(PERIOD/4.0-TIME_UP/2.0)*TE;
  				swatch(TE); // ms
			}
			for(i=0;i<(TIME_UP/TE/2);i++)
			{
				ADC1_IN1=ADC1_IN1-deltaP1;
				swatch(TE);
			}
			for(i=0;i<(TIME_UP/TE/2);i++)
			{
				ADC1_IN1=ADC1_IN1+deltaP1;
				swatch(TE);
			}
			while (ADC1_IN0 >VMOY)
			{
				ADC1_IN0=ADC1_IN0-deltaP;
				ADC1_IN1=ADC1_IN1-(VMAX-VMOY1)/(PERIOD/4.0-TIME_UP/2.0)*TE;
  				swatch(TE); // ms
			}
			while (ADC1_IN0 >VMIN )
			{
				ADC1_IN0=ADC1_IN0-deltaM;
				ADC1_IN1=ADC1_IN1-deltaM1;
  				swatch(TE); // ms
			}
			for(i=0;i<(TIME_DOWN/TE/2.0);i++)
			{
				ADC1_IN1=ADC1_IN1-deltaM1;
				swatch(TE);
			}
			for(i=0;i<(TIME_DOWN/TE/2.0);i++)
			{
				ADC1_IN1=ADC1_IN1+deltaM1;
				swatch(TE);
			}
			while (ADC1_IN0 < VMOY)
			{
				ADC1_IN0=ADC1_IN0+deltaM;
				ADC1_IN1=ADC1_IN1+deltaM1;
  				swatch(TE); // ms
			}

	}
}

KILL button *
define button "Lance baguette","Baguette()"
define button "Lance baguette Inversee","Baguette_Inversee()"
define button "Lance secouée","Accel()"
define button  "voir Taches","LA ADC1_IN0; LA ADC1_IN1; LA PORTB"
